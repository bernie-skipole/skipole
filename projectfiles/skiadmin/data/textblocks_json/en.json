{
  "about_commit": "Committing the project saves changes to JSON files, and stores the project, including your code, to a tar.gz file.",
  "aboutcode.1": "This package will be imported into the framework, and as pages are requested these functions will be called, and their actions will determine the page returned.  Your Python package is located within the framework at:",
  "aboutcode.2": "This location is normally symlinked to your own project directory:\r\n\r\n...projectdirectory/projectcode\r\n\r\nWhich is the location where you will develop your code. Under this directory you should have an __init__.py file (which you should edit) and a textblocks.py file which you should normally leave alone.\r\n\r\ntextblocks.py contains a class for reading and writing TextBlocks - the default does this to JSON files. The file is provided here in case you wish to provide your own mechanism for accessing TextBlocks. Unless you have special requirements, leave the file as its default implementation.\r\n\r\nThe __init__.py file should contain definitions of the following functions:\r\n\r\nstart_project - Called when an instance of skipoles.WSGIApplication is made.\r\n\r\nstart_call  - called when the server receives a call.\r\n\r\nsubmit_data - called by Responders, may be called multiple times within a call.\r\n\r\nend_call    - called prior to returning the page.\r\n\r\nThese functions are available for you to develop and can in turn call on any further modules you wish to include within the package - hence you can access your own databases and functionality.  The arguments to these functions, and their expected return values are described below:",
  "aboutcode.3": "As well as the projectcode directory, your own project directory contains a subdirectory:\r\n\r\n....projectdirectory/projectfiles\r\n\r\nThis is also symlinked into the framework. Any files you wish to attach to the project, such as images or static files should be within this, under the directory:\r\n\r\n....projectdirectory/projectfiles/static\r\n\r\nwhich within the framework, appears as:",
  "aboutcode.end": "You should define the function:\r\n\r\nend_call(page_ident, page_type, call_data, page_data, proj_data, lang)\r\n\r\nThis function is called at the end of a call prior to filling the template (or other type of returned page) with data, and gives you the opportunity to set any further fields in page_data, and to optionally set a session cookie string.\r\n\r\npage_ident is the ident of the page being returned. A tuple ('projname', pagenumber), this is usually the ident of the template, css etc., page but can also be the ident of one of the responders which create a dynamic page (see page_type).\r\n\r\npage_type is a string giving the type of the page returned, typically 'TemplatePage', 'CSS', 'SVG', 'FilePage' or 'JSON'. Certain responders create their own pages and for these the page_type will be the responder type, one of 'SubmitJSON', 'SubmitPlainText', 'SubmitCSS', 'SubmitIterator'.\r\n\r\ncall_data is the dictionary first created by start_call, and possibly modified during the call by responders and your submit_data function.\r\n\r\npage_data is the dictionary populated with widgfield keys and values to go in the widget fields. It could have been populated by your start_call and submit_data functions, and can be further modified here.\r\n\r\nproj_data is the dictionary initially returned by start_project. Typically it is either unused or its contents can be set to any project wide data you require.\r\n\r\nlang is the tuple (language, default_language) provided by start_call.\r\n\r\nThis function should return either None, or optionally a session cookie string. This string will be returned with the next call to this web site in the recieved_cookies dictionary with key being the project name.\r\n\r\nDo not raise a GoTo exception here. Unlike the 'submit_data' function, the results of this function are passed directly to the page given by page_ident.\r\n\r\nIf a FailPage exception is raised, the error will be shown on the page given by page_ident.",
  "aboutcode.failpage": "This exception can be imported into your __init__.py file using:\r\n\r\nfrom .. import FailPage\r\n\r\nIt has arguments:\r\nFailPage(message = '', section='', widget='')\r\n\r\nFailPage is an Exception class that, being raised, makes the Responder call its failure page with an error message.\r\nIt takes arguments - message together with section and widget which indicate where the message is to be displayed.\r\n\r\nTheir default values are empty strings, leave as empty if you do not wish to pass any information.\r\nHowever if possible:\r\n\r\nmessage - An error message string. If missing, the display widget's default 'show_error' text will be shown.\r\n\r\nsection - If the display widget is in a section this should be the section alias, if it is not, leave as an empty string.\r\n\r\nwidget - The name of the widget in the failure page where this message will be displayed.  How the message is displayed will depend on the widget. If not given the message will be shown in the pages default error widget.",
  "aboutcode.goto": "This exception can be imported into your __init__.py file using:\r\n\r\nfrom .. import GoTo\r\n\r\nIt has arguments:\r\nGoTo(target, clear_submitted=False, clear_page_data=False, clear_errors=False)\r\n\r\nThis is an Exception class that, being raised, forces a jump to the page given by the target argument.\r\n\r\nGoTo has arguments:\r\n\r\ntarget: is the ident, label or external url of the page to jump to. If a url is given it should start with 'http://' or 'https://' or '//'\r\n\r\nclear_submitted: if True, any submitted data in the widget fields will be discarded. This allows a GoTo to an AllowedFields responder that expects nothing to be submitted.\r\n\r\nclear_page_data: if True the page_data dictionary will be cleared.\r\n\r\nclear_errors: if a FailPage raises an error and the target failure page is a responder (or sequence of responders), which in turn calls a submit function with a GoTo, then setting clear_errors True when raising the GoTo will remove the error condition from the call, which will therefore not be displayed on the final template page returned.\r\n\r\nIf the target ident is that of a responder page then it cannot be a responder already visited within the call (this will raise a ServerError) as this may cause an infinite loop condition.",
  "aboutcode.intro": "Within __init__.py you should define the functions:\r\n\r\n start_project(project, projectfiles, path, option)\r\n\r\n start_call(environ, path, project, called_ident, caller_ident, received_cookies, root_session_string, ident_data, lang, option, proj_data)\r\n\r\n submit_data(caller_ident, ident_list, submit_list, submit_dict, call_data, page_data, lang)\r\n\r\n end_call(page_ident, page_type, call_data, page_data, proj_data, lang)\r\n\r\nThese functions in turn can call your own packages and modules, to provide whatever data you wish.\r\n\r\nThe framework initially imports and calls 'start_project' which you would use to set any initial start up code. Then, as a call arrives at the server, 'start_call' is called.  If you set a Responder to receive a call, it may call 'submit_data', and finally, just before a template page is returned, 'end_call' is called. \r\n\r\nYour __init__.py module should also import four exceptions which you can use in your functions. These exceptions are available from the parent package, so you can import them using:\r\n\r\nfrom .. import FailPage, GoTo, ValidateError, ServerError\r\n\r\nThe 'start_call', 'submit_data' and 'end_call' together are used to populate a 'page_data' dictionary. This dictionary contents are used to populate the widgets of the final template page returned.\r\n\r\nThe keys of page_data are of the form:\r\n\r\nIf a widget is in a section:\r\npage_data[sectionalias,widgetname,fieldname] = value\r\n\r\nIf a widget is not in a section:\r\npage_data[widgetname,fieldname] = value\r\n\r\nThis framework often refers to the key tuple (widgetname,fieldname) as a widgfield.\r\n\r\nSpecial page_data keys; these are keys which set certain parameters, optionally overriding parameters set when the page is created:\r\n\r\npage_data[sectionalias, 'show'] - Set False to remove the section\r\npage_data[sectionalias, 'hide'] - Set True to hide the section\r\npage_data[sectionalias, 'section_class'] - Set CSS class on the section\r\npage_data[sectionalias, 'multiplier'] - Set number of this section to be shown\r\npage_data[sectionalias, 'multiplier_tag'] - Set the section tag containing each section when multiplied\r\n\r\nThese literal string keys set page parameters:\r\n\r\npage_data['status'] - Sets the returned page status\r\npage_data['headers'] - Sets the returned page headers\r\npage_data['last_scroll'] - Set True to display the page at its last scroll position\r\npage_data['lang'] - Set the language, such as 'en' in the page\r\npage_data['show_backcol'] - Set True to enable the 'HTML' tag background color\r\npage_data['backcol'] - Set the 'HTML' tag background color\r\npage_data['body_class'] - The CSS class of the 'BODY' tag\r\npage_data['show_error'] - Error message to be shown on the page default error widget\r\npage_data['localStorage'] - A dictionary of string keys and values to set in the browser storage\r\npage_data['sessionStorage'] - A dictionary of string keys and values to set in the browser storage\r\npage_data['add_jscript'] - Set to a string containing javascript code. This will be set within the pages automatically generated \"$(document).ready(function(){})\" and will be run when the page is loaded.\r\npage_data['ident_data'] - Set to a string, which will be returned as the 'ident_data' argument to the start_call function if this page submits any data.\r\n\r\nFor SVG pages:\r\n\r\npage_data['enable_cache'] - Enables client cache of this page.\r\npage_data['width'] - Set the width\r\npage_data['height'] - Set the height",
  "aboutcode.servererror": "This exception can be imported into your __init__.py file using:\r\n\r\nfrom .. import ServerError\r\n\r\nIt has arguments:\r\nServerError(message = '', section='', widget='', status='500 Internal Server Error', code=0)\r\n\r\nRaising a ServerError will return the special server error page.\r\n\r\nThe code argument is an error code number, internally the system uses codes 90000 to 99999. If the widget displaying the error message has a field called 'code', it will be set to this code number.\r\n\r\nNormally leave section and widget empty to allow the message to be displayed in the page default error widget.",
  "aboutcode.start": "You should define the function:\r\n\r\nstart_call(environ, path, project, called_ident, caller_ident, received_cookies, ident_data, lang, option, proj_data)\r\n\r\nWhen a call is initially received this function is called. Note the function will not be called when responders or template pages are subsequently accessed within a call.\r\n\r\nenviron is the wsgi environ value\r\n\r\npath is the URL path to the page called.\r\n\r\nproject is the project name.\r\n\r\ncalled_ident is normally the ident of the page being called, it is a tuple ('myprojname', pagenumber) - with 'myprojname' being the project name, and pagenumber being the unique integer page number.\r\n\r\nIf the path is not to a recognised page, the called_ident will be None.\r\n\r\ncaller_ident is the ident of the page making the call, a tuple ('projname', pagenumber), generally sent with any submitted data, this value could be an empty tuple if the page ident is not known - which will happen if the calling page is external or if no data is submitted.\r\n\r\nreceived_cookies is a dictionary of cookie name:values received from the client. Note, that if a language cookie is set by a LanguageCookie responder, the cookie value received will be set in the 'lang' tuple, and will also appear in this dictionary with key 'language'.\r\n\r\nident_data is a string which was previously saved onto the page making the call by setting page_data['ident_data'], and has now been sent back together with any submitted data.\r\nThis facility can therefore be used to pass a reference identifier between calls. You need to validate this string here as it can be altered by a malicious caller. ident_data will be None if not present.\r\n\r\nlang is a tuple of two strings containing the preferred language required by the client in the format (language, default_language). The first item 'language' is initially taken from the client browser's language setting, but will also be taken from the language cookie if one is set via a LanguageCookie responder.\r\n\r\noption is a project attribute, generally a string set on the command line with the -o option when the program was started - or it could be a value set programatically when the wsgi application is created by skipoles.WSGIApplication. Typically it is unused, and by default is set to None.  But it could be used for your own purpose - for example to input a database password when the program is started.\r\n\r\nproj_data is the dictionary initially returned by start_project.\r\n    \r\nThis function should return the tuple:\r\n(called_ident, call_data, page_data, lang)\r\n\r\nIf any tests you set here, which could include testing session cookie values, are ok, then the returned called_ident should normally be the called_ident given in the argument which is that of the page being called.\r\n\r\nIf the called_ident returned is None, the 'URL NOT FOUND' page will be automatically returned.\r\n\r\nIf you wish to handle the call via another page, return an ident, label or url of a page to jump to, typically leading to a login page.\r\n\r\nIf the called_ident returned is that of a Responder page, then depending on the responder, (or sequence of responders) further function calls may be made to the submit_data function below. If called_ident is not a responder (for example a template page) then the function end_call will be called next.\r\n\r\ncall_data is a dictionary which can be either an empty dictionary, or could contain data to pass to the subsequent responders during this call.\r\n\r\npage_data is a dictionary to be populated by this or subsequent submit_data functions, or by the end_call function during the progress of this call.\r\nIt consists of a dictionary of {widgfields:values,...} which will be set in the final template page. If there is no need to set any such values here, then an empty dictionary should be returned.\r\n\r\nNote: a widgfield is a tuple ('widgetname', 'fieldname'), or a tuple ('sectionalias','widgetname', 'fieldname') if the widget is part of a section.\r\n\r\nThe lang tuple returned should normally be the same tuple given in the argument, but can be altered.\r\nIt will be used to request TextBlocks, and will also be passed to subsequent submit_data functions during the call.\r\n\r\nNo un-caught exception should be raised in this function - if any are, the Server error page will be displayed.",
  "aboutcode.startproj": "You should define the function:\r\n\r\nstart_project(project, projectfiles, path, option)\r\n\r\nThis function is called when the wsgi application is first made by creating an instance of skipoles.WSGIApplication.  If your web server starts multiple processes, then be aware this function will be called multiple times.\r\n\r\nproject is the project name.\r\n\r\nprojectfiles is the string path to the framework's directory of non-python data and static files. Each project's specific directory can be found beneath it - that is, in the projectfiles/project directory.\r\n\r\npath is the url path to the project.\r\n\r\noption is a project attribute, generally a string set on the command line with the -o option when the program was started - or it could be a value set programatically when the wsgi application is first made by creating an instace of skipoles.WSGIApplication. Typically it is unused, and by default is set to None. But it could be used for your own purpose - for example to input a database password when the program is started.\r\n\r\nThe function should return a dictionary, which will be passed to subsequent functions as proj_data. Again there may be multiple copies, one created for each process. If this feature is not used, return an empty dictionary.",
  "aboutcode.submit": "You should define the function:\r\n\r\nsubmit_data(caller_ident, ident_list, submit_list, submit_dict, call_data, page_data, lang)\r\n\r\nThis function is called when a Responder wishes to submit data for processing in some manner. This function typically should populate the page_data dictionary, usually with widgfields as keys, and values to insert into the fields.\r\n\r\nA Responder is chosen from a list of Responders by yourself, and added to this site like any other page. Each Responder has a different functionality. Certain Responders call this submit_data function. Typically a client web browser would make a call to a Responder, which would validate the call, set data into the call_data dictionary, and then call the submit_data function.  Responders generally are set with a target ident - generally the ident of a template page, which will have its widgets populated by the page_data dictionary.\r\n\r\nThe Responder calling this function should specify what it wants returned in its documentation.\r\nMost Responders require 'None' to be returned, but, for example, the LogIn Responder requires a session string.\r\n\r\nNote: a widgfield is a tuple ('widgetname', 'fieldname'), or a tuple ('sectionalias', 'widgetname', 'fieldname') if the widget is part of a section.\r\n\r\ncaller_ident is the ident of the page making the call, a tuple ('projname', pagenumber), generally sent with any submitted data, this value could be an empty tuple if the page ident is not known - which will happen if the calling page is external or if no data is submitted.\r\n\r\nIt is possible for one Responder to pass the call to another, therefore this function could be called multiple times within a single call, ident_list is the list of such Responder idents called - the first item being the Responder ident called by the user, the last entry being the Responder ident that called this function.\r\nEach item in the list is a tuple of the form ('projname', pagenumber).\r\n\r\nsubmit_list is a list of strings which may be submitted by the Responder calling this function.\r\nThey are optionally used for your convenience, and set when you add a Responder to the project. If the 'use_submit_list' decorator is used, the submit_list can be used the define an alternative function to submit_data. See the information about 'use_submit_list'.\r\n\r\nsubmit_dict is a dictionary which may be submitted by the Responder calling this function.\r\nThe use depends on the Responder - read the Responder documentation.\r\n\r\ncall_data is the dictionary previously returned by start_call, it will be passed to subsequent Responders during a call.  Your functions can populate it in any way required, however if you wish to clear it, use call_data.clear() rather than deleting it.\r\nTypically a Responder would be used to pass submitted form data into this call_data dictionary prior to this function being called.\r\n\r\nSimilarly page_data is the second dictionary previously returned by start_call, it will also be passed to subsequent Responders during a call.  Your functions can populate it with keys which should be widgfields and values to go in the widget fields.  At the end of the call, these will be inserted into the template or JSON page. If you wish to clear this dictionary, use page_data.clear() rather than deleting it.\r\n\r\nlang is the tuple (language, default_language) provided by start_call.\r\n\r\nOn returning from this function the call will be passed to the Responder's target page, which could typically be a template page (in which case your end_call function will be called next) or it could be another Responder.  If required a GoTo exception could be raised to jump elsewhere, or a FailPage exception could be raised to jump to the Responders failure page with an error message.",
  "aboutcode.usesubmitlist": "The decorator use_submit_list can be imported into your __init__.py file using:\r\n\r\nfrom .. import use_submit_list\r\n\r\nIt can then be used to decorate your submit_data function like:\r\n\r\n@use_submit_list\r\ndef submit_data(caller_ident, ident_list, submit_list, submit_dict, call_data, page_data, lang):\r\n.... < your code >\r\n\r\nThe effect of this decorator is to inspect the submit list argument, and if it contains nothing, or a single element only - it does nothing, submit_data runs as normal.\r\n\r\nHowever if submit_list contains more than one string, it expects the strings to be ordered as ['module_name', 'function_name'] - or ['package_name', 'module_name', 'function_name'].\r\n\r\nIt then uses these names to replace submit_data with the found function.  This can be convenient. When you create a responder that calls 'submit_data' - you set the responder submit list to call the appropriate function in your code.\r\n\r\nHowever your target functions must have the same 'submit_data' arguments, they should be of the form:\r\n\r\ndef function_name(caller_ident, ident_list, submit_list, submit_dict, call_data, page_data, lang):\r\n.... < your code >\r\n\r\nYou do not have to use this decorator, if you prefer to use submit_list, or route functionality some other way, then that is your choice.",
  "aboutcode.validateerror": "This exception can be imported into your __init__.py file using:\r\n\r\nfrom .. import ValidateError\r\n\r\nIt has arguments:\r\nValidateError(message = '', section='', widget='', status='400 Bad Request')\r\n\r\nValidateError will return the special validate error page.\r\n\r\nNormally leave section and widget empty to allow the message to be displayed in the page default error widget.",
  "changes_not_saved": "Changes not saved",
  "editpage.page_name_required": "A page name is required",
  "editpart.attribute_table": "This table consists of attribute names and values, you can edit any name:value, and then press Change to set the changes, or Delete to remove the attribute.",
  "export_tar.site_app": "__main__.py consists of a simple python script that starts a web server and runs your application. Simply use:\r\n\r\npython3 __main__.py\r\n\r\nThis will serve your application on port 8000. ('python3' should invoke Python 3.2 or later.)\r\n\r\nThe default automatically generated __main__.py imports the skipoles package and creates a wsgi application function which is an instance of skipoles.WSGIApplication. This is then served with the python library web server. Two options are available:\r\n\r\npython3 __main__.py -p 8080\r\n\r\n-p defines the port number\r\n\r\npython3 __main__.py -w\r\n\r\nInstead of the library web server this will run with the Waitress web server if it has been installed on your system (package python3-waitress on Debian based distros).\r\n\r\nIf instead of the default you wished to create your own __main__.py, you should create a __main__.py and insert it beneath the 'data' folder as shown above. It will then replace the default when you commit the project.\r\n\r\nAs well as __main__.py, the file myapp.py is created. This is a minimal file, also creating a skipoles.WSGIApplication instance, but not running any server. Typically it is to be used with a third party wsgi server. For example using uwsgi:\r\n\r\nuwsgi --plugin python3,http --http :8000 --wsgi-file myapp.py\r\n\r\nBoth __main__.py and myapp.py should be inspected as they illustrate how the wsgi application can be used.",
  "folder_ident_not_known": "Folder ident not known",
  "index_background_colors": "A background color can be set into the <html> tag of your project pages. This helps to prevent a flash of white when the page is loading on a slow site. The background color can be set individually on each page - or if set here, can be applied across all pages that have the 'show background color in html tag' set.  In general, the color should be set to the same background color applied via CSS to your body element.",
  "index_bodyclass": "The CSS class in all Template page <body> tags can be set here.",
  "index_insert_css_link": "For each template page, insert a CSS link to the given label, in the page head, before the element with the given brief.",
  "index_set_css_class": "For each element within each template page body, if it has a given brief, set its CSS class attribute.",
  "index_sub_projects": "Each site can consist of a root project with a number of sub projects.\r\n\r\nThis project being edited is the 'root' project. You can add further sub projects if you have already created them. This should always include the 'lib' project which contains javascript files used by all other projects.\r\n\r\nYou will also see the 'skiadmin' sub-project, this is automatically added when the project is administered, and automatically removed from the tar file when the project is commited, so it is not included within your project.\r\n\r\nNote: Projects added here will not include any sub-projects they may have themselves - each sub project required must be added separately.",
  "index_test_colors": "The options below generate a colour palette from a background colour you choose.\r\n\r\nThe colour pallet produced will be applied to the w3-theme-ski.css used by this admin project - not to your own project. This feature is available to test combinations of colours which you may choose (or not) to use yourself. You may have to use CTRL-R to refresh your cache.\r\n\r\nThe resultant css file can be downloaded from:",
  "index_widget_classes": "When widget CSS class fields are set, it is possible to set the applied class to be the 'default' for this widget type and its field.\r\nThe option below allows you to set all template page widgets CSS classes in your project to be their appropriate default - so if you prefer a new default part way through building the project, you can apply it retrospectively.\r\nPlease note: this change is not applied to widgets in 'Sections'.",
  "managesections.about_sections": "Sections are blocks of html and widgets which are added to the project under a section name.\n\nThe section block should not be confused with the html section tag - generally this section block will consist of a div, together with any amount of content.",
  "managesections.add_top_widget": "To set a Widget into the section, choose a module from the table below, and then choose a widget from the module.  Some widgets may contain further html and further widgets. Once chosen and added to the section, you will be able to edit the contents in future by choosing to edit the section.",
  "managesections.more_about_sections": "Once a section is created, it can be added to multiple pages. Subsequent editing of the section here will then change it across all pages.",
  "managesections.new_section": "Create a new section by choosing a name, a div will be created which you will be able to edit - adding further html and widgets.",
  "managesections.section_table": "Or choose a section to edit:",
  "managespecialpages.about_libfiles": "The following labels point to file locations, either as file page idents if the files are held locally, or as URL's to external sites. These labels will be used to create links in page headers, whenever a new page is created. As default these files are available in the lib project, and should not normally be altered.",
  "managespecialpages.about_pages": "Page \"Labels\" are strings associated with a target page ident.\r\n\r\nSome of these pages are used by this Skipole system, and are expected to exist.\r\nIn general, the system special pages should be treated with caution, and should not be altered. As default these pages are set in the lib project, however if you wish to create your own, you can change the target to a local page ident and press Edit.",
  "managespecialpages.user_pages": "It is also possible to add your own labels and idents, which may be useful.\r\n\r\nDo not use labels starting with 'ski_' as future versions may introduce further\r\nspecial pages using this prefix to avoid clashing with your labels.",
  "no_javascript_text": "JAVASCRIPT FAILURE\r\n\r\nThis page is shown because the script on the previous page has failed to run.\r\n\r\nThis could be due to either a failure in the script, or your browser has javascript disabled.",
  "operations": "The operations defined here apply across multiple template pages.",
  "page.20001": "This is the top Admin page.\r\n\r\nTop navigation functions:\r\n\r\nThese change to folder edit links, so if working on a page you can quickly jump to its parent folder.\r\n\r\nMain functions of this page:\r\n\r\nThe Project Version records your own version numbering system, generally using a dotted version system such as 1.0.3. Apart from this value being saved with the project, it is not used by the skipole framework.\r\n\r\nA brief description of the project can be set, with the default language (a two or three letter designation such as 'en') and the path to the project - generally just '/'.\r\n\r\nYou can choose a page to edit (via a page ident number, label or path). This option is also available by the left navigation panel.\r\n\r\nCommit Project\r\n\r\nThis saves your changes to JSON files and also creates a 'tar.gz' file which you can download and store.  If you do not commit the project, any changes will be lost when the server is stopped.\r\n\r\nDownload\r\n\r\nOnce committed to the tar.gz file, this option allows you to download a copy for safe storage elsewhere. If a project is deleted from the skipole framework, but you have the tar file safely stored, then the --import option of skipole.py will import and rebuild the project from the tar.gz file.\r\n\r\nSub projects\r\n\r\nProjects previously created can be added as 'sub-projects', and accessed by a URL given here.\r\n\r\nLeft navigation functions :\r\n\r\nProject\r\n\r\nTakes you to the edited project home page.\r\n\r\nRoot Folder\r\n\r\nGoes straight to edit the top root folder of the project, a good place to start.\r\n\r\nPage Labels\r\n\r\nPages are generally referred to by their ident number, which is set when the page is first created.  However it is possible to set a 'label'  to the ident (essentially a label to number dictionary). Given such a label alias, a page can be referred to by the label.\r\n\r\nTextBlocks\r\n\r\nAllows TextBlocks to be created, these being a reference string, associated with a block of text.  The reference string can be set into a page, and the text will then be shown.\r\n\r\nSections\r\n\r\nAllows sections of HTML and widgets to be created, which can then be placed into pages, typically used to create page headers and footers common to multiple pages in the project.\r\n\r\nColours\r\n\r\nAllows the colours of these admin pages to be set, used to explore colour combinations.\r\n\r\nOperations\r\n\r\nSeveral special project wide operations are gathered together here. In particular - the default CSS and javascript links to insert into page headers when a new page is created can be set in this section.\r\n\r\nPython Code\r\n\r\nDescribes where your Python code should be located, what functions you should provide, and their arguments and return values.",
  "page.20002": "Insert text here",
  "page.20129": "The path of the sub-project can be set here - this does not change the project itself, it only sets the path where the sub-project will appear.\r\n\r\nThe path should be lower case, for example if the root project is:\r\n\r\n/myproj/\r\n\r\nThen a sub-project may be at:\r\n\r\n/myproj/suproj/\r\n\r\nIn the situation of overlapping paths:\r\n\r\nA sub-project path has preference over a page path set by the folders and pages within the root project.  So if the root project has a folder and page at:\r\n\r\n/myproj/myfolder/mypage\r\n\r\nAnd if a sub-project is added with path /myproj/myfolder/, then the sub-project will always be contacted with paths starting /myproj/myfolder/ and the mypage of the root project will never be served.\r\n\r\nIf two sub-projects have overlapping paths, the project with the more specific (longest) path set here will be served first.",
  "page.20300": "This page allows you to explore colours by generating a colour palette from a given background colour - and using this generated palette in these admin pages.\r\n\r\nThe palette generated attempts to pick a set of 'near' colours which hopefully will harmonise with the background colour, and also some contrasting colours for text.\r\n\r\nThese are then inserted into CSS classes within the file w3-theme-ski.css which can be downloaded from this page.\r\n\r\nYou are the free to use - or not as you wish - this resultant file and these colours in your own CSS pages.",
  "page.20409": "This page will be returned to the client as a JSON file.\r\n\r\nGenerally a JSON file should only be returned when a widget which explicitly requires a JSON file calls the server.  The file contents can be those widgfields on the calling page with values that are labeled as 'JSON settable'.\r\n\r\nTypically this is used to set specific widgfield values on the calling page without having to refresh the entire page.",
  "page.20500": "When you 'commit' the project, it will be saved to json files, and these, together with your static pages and Python code, and a copy of the skipole Python packages needed to run a site, will be saved into a tar.gz file.\r\n\r\nYou can take a copy of the tar.gz file and save it elsewhere to store a snapshot of the project. You can also extract the contents to create a python web site of your project without the admin functions.\r\n\r\nThe tar.gz file can also be later imported back into the skipole framework should the project be deleted.",
  "page.22009": "Edit a Folder\r\n\r\nYou can view a folder's contents, and edit, insert or delete folders or pages within it.\r\n\r\nIf the edited folder is not the project root folder you can set it as 'restricted', in which case the folder contents cannot be called directly by their URL.  These contents can only be called via a user function or by Responders forwarding calls to these pages.\r\n\r\nThe default page of a folder is the page returned if the calling URL is that of the folder.",
  "page.22109": "To create a folder, to which you can add pages and further folders, leave the 'Linked Server Path' unchecked and fill in folder name, description and ident number. You can either accept the next free ident number (which is automatically shown), or you can choose your own number.\r\n\r\n'Restricted Access' should be set if the folder contents cannot be called directly by URL, such a folder is generally used to hold template pages which are only accessed after a responder has been called.\r\n\r\nAt some point you may need to add 'File Pages' which link to static files on your server. However if you wish to add a number of File Pages - a javascript library for example - it becomes tedious to add them individually, so you can set 'Linked Server Path' here and File Pages will automatically be created to reflect the actual files beneath the given server directory (relative to 'projectfiles'). This is recursive - so sub folders and their contents will be created as well. \r\n\r\nHowever this linking is not dynamic, any future file additions or deletions on the server will require new File Pages to be created and added to the folder.\r\n\r\nAs well as creating a folder, you also have the alternative option here of importing a folder definition JSON file - which will include any of that folders contents, presuming you have previously created such a file (available as a Download option when you edit a folder). However as Folder and Page ident numbers will be imported, and may clash with your current ident numbers, you have the option here of setting a number which will be added to each of the imported idents. Choose a number to make the new idents outside of your current ident number range.\r\n\r\nYou should also set a new folder name, which will replace that set in the file, this name should be unique within the parent folder.",
  "page.22309": "A 'Template' page contains html elements and widgets.\r\n\r\nA 'Responder' page is a script, which generally acts on submitted data by calling validation functions, storing submitted data and calling your submit_data function.\r\n\r\nAn 'SVG Image' page is like a Template page, but holds SVG elements and widgets.\r\n\r\nA 'CSS' page holds CSS style declarations.\r\n\r\nA JSON page sends the contents of the dictionary 'page_data' as a JSON formatted file.\r\n\r\nA 'File Link' page links to a file held on the server, such as a pdf file or a static html file. When this page is requested by a client browser, the associated file is served.\r\n\r\nIt should be noted that the associated file is only saved and included in the export.tar file if it is sited beneath the folder projectfiles/projectname/static\r\n\r\nEvery folder and page has a unique ident number, with the root folder of the project having number zero. You can either accept the next free ident number (which is automatically shown), or if you wish to organise folders and pages by number you can choose your own numbering scheme.\r\n\r\nA brief description of the page should be provided.\r\n\r\nA new page name, unique in the folder, must be given.\r\n\r\nOnce a new page has been created and added to the folder, it will need to be edited to be given content.",
  "page.22431": "The SVG image created here is a dynamic container, with tags and widgets set in the same manner as a template page.\r\n\r\nHowever the tags and widgets added should only be those compatible with the SVG standards. It may be better, if the dynamic facilities provided here are not required, to serve a pre-made image as a static file.",
  "page.22451": "A 'File Link' page links to a file held on the server, such as a pdf file or a static html file.\r\n\r\nWhen this page is requested by a client browser, the associated file is served. It should be noted that the associated file is only saved and included in the export.tar file if it is sited beneath the folder projectfiles/projectname/static",
  "page.22461": "You can choose to either input the ident number of a page to be copied, or upload a page definition file (currently only available for 'template' and ''svg' pages).\r\n\r\nPage definition files can be downloaded from the 'edit' page area.\r\n\r\nOnce copied, the new page will have the new ident, name and folder, but otherwise will be a duplicate of the page copied.",
  "page.23209": "A Template page can be edited here.\r\n\r\nThe left navigation buttons 'Head' and 'Body' allow you to insert and edit items in the page head and body parts.\r\n\r\nThe page Default Error Widget is the widget name within the page which will display an error message if an error exception is raised which does not specify a widget where the error should be displayed.  If you wish to set a default error widget which is within a section, then set the name as sectionalias,widgetname.\r\n\r\nThe 'html' tag of the page can have two attributes set here, the 'lang' attribute, and the background colour.\r\n\r\nSetting the background colour in the html tag can be useful to stop a white page being briefly displayed on slowly loading sites before the associated CSS page is loaded. Check the option if you want to use this facility, or uncheck it if not, and press Submit. The colour chosen should normally be the same as the background colour you set in the body tag.\r\n\r\nIf you enable the JSON refresh facility, and set a time interval (in seconds, and greater than zero) together with a target ident, then the client browser displaying this page will repeatedly call the target, each call separated by the time interval you set here.  The target should return a JSON file populated with the widgfields on this page which you wish to update.\r\n\r\nThis allows a page to be displayed with fields regularly updated.",
  "page.23329": "Though it is possible to edit the 'head' of the page here, it should generally not be necessary.\r\n\r\nLinks to widget javascript modules are added automatically by the framework as you add widgets to your pages. So probably the only items you may wish to insert are links to your own javascript and CSS files.\r\n\r\nBefore doing so, please check the Operations functions, where you have the option to set default CSS and Javascript links - which will be automatically inserted in the page head whenever a new page is created.",
  "page.23349": "You can insert and edit html tags, widgets, sections, text and TextBlocks into the 'body' of the page here.\r\n\r\n'insert' creates a new item within an element, 'append' adds a new item after\r\nan element, the arrow keys can be used to move items around.\r\n\r\nIn general, html tags and their attributes are static, in that they cannot be changed dynamically via your Python functions.\r\n\r\nWidgets however have a number of fields which can be changed by setting the page_data dictionary.\r\n\r\nThere are some exceptions to this:\r\n\r\nThe 'body' tag - the css class in the body tag can be set dynamically by setting page_data['body_class'] to the class value.\r\n\r\nSections can be set to be included if page_data[section_alias, 'show'] is True (the default) or excluded if set to False.\r\n\r\nHTML elements that have an attribute with a label surrounded by curly braces, such as {page_label} - this will be changed to the URL if page_label is a previously defined label.",
  "page.23409": "You can add and edit elements and widgets in this page by choosing the 'SVG' button below.  The elements and widgets should only be those applicable to SVG images, adding other none-SVG compatible widgets will no doubt produce odd results!",
  "page.23609": "You can choose an item to insert here.\r\n\r\nText - a text string which you can edit\r\n\r\nTextBlock - a reference to a TextBlock\r\n\r\nHTML symbol - such as &uarr; which will be translated as an up arrow.\r\n\r\nComment - a string which will appear in the page source code as a comment.\r\n\r\nHTML element - a tag block such as a <div>\r\n\r\nWidget - which will lead you through widget modules to choose a widget\r\n\r\nSection - a section name with an alias. (Only available if this insertion point is not itself within a section)",
  "page.24001": "A TextBlock is defined by a reference label, and each TextBlock can have multiple associated language strings, such as \"en\" and \"fr\", each with a corresponding block of text in that language.\r\n\r\nA TextBlock with this reference label can then be inserted into your pages, typically within a paragraph, and then when the page is displayed the associated block of text will be shown.\r\n\r\nIf a language has been chosen (usually the default language set in the browser) and if the appropriate language text is available in your TextBlock, then that particular text will be displayed.\r\n\r\nThis page allows you to create a new TextBlock, by setting a reference string, or you can edit or remove existing TextBlocks.\r\n\r\nChoosing a reference string with a '.' in it allows you to group TextBlocks together for easier management, so for example you may make TextBlock's with reference string 'subject.topic1' and a second with 'subject.topic2'.  In this case the two TextBlocks will be grouped together on this page under 'subject...'",
  "page.24005": "This page shows TextBlocks in this group where a group is just a namespace derived from '.' characters in the reference string.\r\n\r\nFurther subgroups - using further '.' characters in the reference string can also be viewed here.",
  "page.24019": "This allows you to choose a language, and the text that will appear at this TextBlock position for users of that language.\r\n\r\nThe user's language is initially taken from a language cookie, if one is set, and then the client browser's language setting if no cookie is set. If no text has been added for the clients preferred language, the project default language is tried, and then 'en'. If no text is available for any of these, then the failure text - set when adding a TextBlock to a page - will be shown. ",
  "page.25001": "The skipole framework expects certain pages to exist, and uses these pages - for example to show a server error.\r\n\r\nRather than set these special pages with fixed idents, the system uses a dictionary of labels to idents. This allows you at any time to change these labels to point to other idents and hence force the system to use alternative pages.\r\n\r\nIt may also be useful to use labels with external URL's rather than idents, particularly to link to external javascript libraries.\r\n\r\nYou can set these system pages here, and you can also add your own labels and idents if you find them useful. Note, idents are usually the ident number of a page of this project, but can also be the ident number of a sub project if the ident is given as \"subprojectname, number\" or \"subprojectname, label\". In the latter case, the label is the label given to the ident within the sub-project.\r\n\r\nMost projects should include the 'lib' sub project, which contains javascript modules for the skipole widgets. Links to these labels, and hence modules are automatically added to the 'head' section of template pages as widgets are created. Normally you should simply not alter these labels and links, however for high performance it would be possible to serve these files via a dedicated static server, in which case these labels would be altered to point to URL's rather than to the lib sub project.",
  "page.26009": "You can edit a Responder here. A 'Responder' is a script that typically takes several parameters, does some action, and then passes the call on to a target page.\r\n\r\nThe target could be another responder (which takes further actions), or could be the final page to be returned to the caller, such as a JSON or Template page.\r\n\r\nSeveral Responders are available to use. Some check submitted data, and typically place submitted values into the call_data dictionary, others call your own 'submit_data' function.",
  "page.27009": "Very often it is necessary to repeat a block of html across multiple pages - for a navigation or footer perhaps.\r\n\r\nSections created here are blocks of html and widgets which are added to the project under a section name, and then can be inserted into a page, with an 'alias name'.  The alias is used so that a section can be added multiple times to a page, with different unique names.\r\n\r\nSubsequent editing of a section here will then change the section code in all pages containing the section.\r\n\r\nTo create a new section, enter a section name, which should be alphanumeric, and can contain underscore characters. Do not give a name such as 'head' or 'body' which may cause confusion.",
  "page.27010": "You can create a new section by specifying the top tag, in which case a section will be created with this tag, and then you will be able to edit the section to add further contents.\r\n\r\nAlternatively, if you have previously downloaded a section definition file, you can choose to upload it - in which case it will be created and given the new name here.  This is a method of copying a section, and also provides the opportunity to manually edit the section definition JSON file which should be reasonably self explanatory if inspected.",
  "page.27049": "You can insert html tags, symbols, widgets, text and TextBlocks into the section.\r\n\r\nElements can be moved with mouse drag and drop and by the arrow keys.\r\n\r\nIn general, html tags and their attributes are static, in that they cannot be changed dynamically via your Python functions.\r\n\r\nWidgets however have a number of fields which can be changed by setting the page_data dictionary.\r\n\r\nThe 'widfield' keys in page_data reference the field of any widget set here with a tuple:\r\n\r\npage_data['alias name','widget name','field name']='new field value'\r\n\r\nNote that the section 'alias name' is not the section name specified here, it is the alias given when a section is inserted into a page. This alias allows multiple copies of a section to be inserted into a page, each with a different alias.\r\n\r\nIt is also possible to dynamically set the 'show', 'hide' and 'section_class' fields of the section top tag, so if you do not wish to include the entire section:\r\n\r\npage_data['alias name', 'show'] = False\r\n\r\nor if you just wish to hide it:\r\n\r\npage_data['alias name', 'hide'] = True\r\n\r\nOr if you wish to set the CSS class of the section top tag:\r\n\r\npage_data['alias name', 'section_class'] = 'myclass'\r\n\r\nNote: the hide and section_class fields can be set by JSON call.",
  "page.28009": "Normally CSS pages are static files, and you would use a FilePage to pull them from their location on your server.  However it is also possible to create CSS files here, perhaps for test purposes or for more dynamic control.\r\n\r\nAdd the CSS selector strings here, and you will then be able to edit each selector properties.",
  "page.28309": "Edit the selector properties and press submit, or return to the page by choosing the 'CSS Page' button.\r\n\r\nEach property line should be of format:\r\nproperty : value;\r\n\r\nFor example:\r\n\r\nfont-size : 12px;\r\nmargin : 0;\r\npadding : 0;\r\n\r\nYou can also create a ${key string} where a colour would normally go, for example:\r\n\r\nbackground-color : ${my background};\r\n\r\nIf a ColourSubstitute responder is called, which targets this CSS page, the responder will call your submit_data function which should return a dictionary of strings as keys, and colour strings as values.  The keys will be searched for in the target CSS page with format '${keystring}' and, where found, the colour value will be placed there.",
  "page.29009": "A 'FilePage' returns a file from your server. Typically a static HTML, CSS, javascript or image file.\r\n\r\nThe filepath set here should give the location of the file on your server relative to the projectfiles directory - so for a project myproject and file myfile in the static directory, the path should be myproject/static/myfile.\r\n\r\nBoth the filepath and the mimetype can be set in page_data, for example:\r\n\r\npage_data['filetype'] = \"myproject/static/myfile\"",
  "page.51019": "Set the text to appear on the page here. Newlines will appear as <br /> elements.",
  "page.51209": "You can edit a comment here, which will be placed in the html source code of the page.",
  "page.52019": "This page can be used to set the reference string of the TextBlock on the page.\r\n\r\nWhen the page is displayed, the reference string is used to look up the associated TextBlock text.  If no TextBlock is found, the text given in the field \"TextBlock not found message\" is displayed.\r\n\r\nThe text of the TextBlock can be displayed with any linebreaks converted to HTML linebreaks, it can also be set to escape HTML character codes in the text - or if not escaped, they will be displayed as HTML.\r\n\r\nWhen text is retrieved, the framework normally calls the 'get_text' method of the project's AccessTextBlocks object which is defined in the textblocks.py module of user code. This returns text which is displayed. However if the Decode option is On, then the 'get_decoded_text' method is called instead.\r\n\r\nTypically you can create any algorithm you like to decode your stored text into HTML, this may be useful to import restructured text for example.\r\n\r\nSince you are in control of the HTML produced, the linebreaks and HTML escape options are disabled.",
  "page.52509": "A TextBlock is a mapping from a reference string to a block of text.\r\n\r\nYou can create the string to text mappings using the 'TextBlocks' link in the left navigation panel.  The page displayed here allows you to insert a TextBlock reference into a page or section.  When the page/section is displayed, the associated block of text will be shown.\r\n\r\nThe mapping also includes a language facility, so a single text reference can display text for different languages dependent of the preferred browser language. In this case you would have to supply the text for each supported language.\r\n\r\nSetting HTML escape codes to off allows you to insert your own block of HTML code here rather than just text.",
  "page.53009": "You can set the element's attributes and values here. For example, an attribute could be 'class' and the value would be a CSS class to apply to the element.\r\n\r\nWhen setting values do not include surrounding quote marks, these will be inserted automatically.\r\n\r\nAs a special case, if an attribute value starts with a string in curly brackets, such as {label}, and if the string ('label' in this case) is a label pointing to page or URL, then the URL or page URL will be inserted here when this element is sent to the client browser.  This allows you to create links to pages with attribute href, and destination {target}.\r\n\r\nHence changing the label target page will conveniently change all your links which have been configured in this way.",
  "page.53509": "You can create an html element here, such as a <div> or <p> tag. This will appear on the page, and you will then be able edit it, to add attributes, or insert further contents within it if it is of the form <tag> ...</tag>.\r\n\r\nYou have the option here to create tags of the form <tag /> - which can also have attributes, but do not contain further contents.",
  "page.54009": "The widget name and a brief description can be set here.\r\n\r\nWidgets have fields set with values that control the look and operation of the widget. The term 'widgfield' is used to mean the tuple (widgetname, fieldname), or, if the widget is in a section (sectionalias, widgetname, fieldname).\r\n\r\nThe fields can also be re-named if required.\r\n\r\nThe widget fields are listed, and can be chosen to be set with a default value, which can be overwritten by your own functions setting the page_data dictionary.\r\n\r\nFor example:\r\npage_data[widgetname, fieldname] = newvalue \r\n\r\nIf a widget field requires a list or dictionary as its value, then it must be set via page_data rather than a value being set here.",
  "page.54021": "Widgets have fields set with values that control the look and operation of the widget. The term 'widgfield' is used to mean the tuple (widgetname, fieldname), or, if the widget is in a section (sectionalias, widgetname, fieldname).\r\n\r\nNormally the default field name can be left as its default name, however if more descriptive names are required, the field name can be changed here.\r\n\r\nFor those fields that only take a single value, the default value can be set here, and can be changed by setting a new value in the page_data dictionary.\r\n\r\nFor example:\r\npage_data[widgetname, fieldname] = newvalue\r\n\r\nThose fields which are CSS classes and styles can be set as default for the widget, which allows you to create a default look for your project.\r\n\r\nThose fields which are used to submit data can have a 'validator' added. The validator being a routine applied to the submitted value.  The actual validation test is done when the submitted data is received by a responder, and the responder has 'validation enabled'. Certain validators are also run by javascript routines on the web client to improve client responsiveness.",
  "page.54509": "This page lists widget modules. Each module holds a number of widgets, choose a module and you will then be able to choose a widget from that module.",
  "page.54519": "These are the widgets available in this module.",
  "page.54529": "The widget needs a name, unique to the page or section in which it is contained. This name will form part of the 'widgfield' key in the page_data dictionary when setting field values.\r\n\r\nA brief description should also be set - describing how the widget is being used, this is for your own documentation.\r\n\r\nThe rest of this page shows the fields of this widget.  They cannot be edited here, but can be set once the widget has been created. They are shown here to help illustrate the widget functionality.",
  "page.54709": "Certain widgets can contain further html, including further widgets. Some can have more than one 'container'.\r\n\r\nTypically this is used with a form widget - which can contain a number of input field widgets within it.\r\n\r\nAny further widget inserted here must have a unique name within the page or section where the parent widget is sited.\r\n\r\n'Sections' can only be placed inside a container if the parent widget is in a page, not if the parent is within a section, this is to prevent loops in which an element may contain itself.",
  "page.55009": "This is a Section 'place holder'. When the page is loaded, the section (previously defined under 'Sections') is set into the page. The section is then given an alias, so the widget fields within the section can be referred to using the widgfield of ('aliasname', 'widget name', 'field name').\r\n\r\nYour submit_data function can set a key into page_data of ('aliasname', 'show') with a value of True or False. This can be used to dynamically include the section, or not, at run time. As default the value is True.\r\n\r\nSimilary ('aliasname', 'hide') will hide the section, and ('aliasname', 'section_class') will set a CSS class into the top section element. These values are JSON settable.\r\n\r\nYou can also set a key into page_data of ('aliasname', 'multiplier') with an integer value of 1 or more. This can be used to dynamically include the section multiple times. If the multiplier is greater than one, each aliasname will have an underscore and index number appended. So setting widget fields in the first section will need a page_data key of (aliasname_0, widget name, field name).",
  "page.55509": "If you have previously created one or more sections, this feature allows you to insert a section.\r\n\r\nYou will need to choose a section name alias, which must be unique within the page - this will then be the section alias name widget fields within the section can be referred to using the widgfield of ('aliasname', 'widget name', 'field name').\r\n\r\nYour submit_data function can set a key into page_data of ('aliasname', 'show') with a value of True or False. This can be used to dynamically include the section, or not, at run time. As default the value is True.\r\n\r\nSimilary ('aliasname', 'hide') will hide the section, and ('aliasname', 'section_class') will set a CSS class into the top section element.",
  "page.56009": "A validator is assigned to the field which will send data to the server. This page has the following items:\r\n\r\nError Message : If given is the error message to be displayed on the returned page if the validator fails.\r\n\r\nIf an Error message reference is given rather than an Error Message, then the text from the TextBlock with this reference will be shown as the error message.\r\n\r\nIf neither Error Message nor Error message reference are given, then the default error message of the widget displaying the error will be shown.\r\n\r\nDisplay widget is the name of the widget to show the error message. If not given the pages default error widget will show the message.\r\n\r\nAllowed values: Validators can have a set of strings which will be allowed past the test, if not required, do not add any.\r\n\r\nMany validators have further parameters, which depending on the validator, will be shown here, and their values changed by the edit link.",
  "page.56109": "Many validators have parameters with values. Such a value should be set here.",
  "page.56309": "Validators are test functions that will be applied against received data. Several validators are available, grouped into modules, pick a module to view validators available within it.",
  "page.56319": "Lists the validators available in this module, choose one to add it to the widget field.",
  "page.70101": "This page describes where your Python code should be located, and the functions you should provide, with their arguments and return values.\r\n\r\nThe functions you need to supply are:\r\n\r\nstart_project\r\n\r\nstart_call\r\n\r\nsubmit_data\r\n\r\nend_call\r\n\r\nThe function start_project is called when the project is first loaded, and can typically be used to initiate any startup code you require.\r\n\r\nAs the web server is running, when a user calls the site, the framework will call the other three functions.\r\n\r\nInitially 'start_call' when the call is first received, then optionally one or more calls to 'submit_data' depending on how the call is handled.\r\n\r\nFinally 'end_call', after which data is sent to the client.  In typical operation these functions populate the 'page_data' dictionary which fills in values of a 'TemplatePage'.\r\n\r\nYour __init__.py should import these exceptions:\r\n\r\nfrom .. import FailPage, GoTo, ValidateError, ServerError\r\n\r\nThese can be used by your functions to generate error conditions, or in the case of GoTo, to force a jump to another page.",
  "page.70105": "The skilift package, (located at ...skilift relative to your __init__.py) contains a number of utility functions which you may find useful.\r\n\r\nThese functions are normally only used by the 'skiadmin' project. If your final application (which does not include skiadmin) does not call on any of these functions, the 'skilift' package can be deleted from your installation.\r\n\r\nThe skilift functions are used to edit projects, they may be useful in some circumstances, but any that are used to change the project (as opposed to just gathering information) should not be used if multiple users are accessing your project.",
  "page.85001": "These operations manipulate multiple pages across your project.\r\n\r\nWidget default CSS classes:\r\nThe first option on this page deals with CSS classes. Widgets have fields of CSS classes which set the look of the widget, and these fields have default values, which are saved in the defaults.json file within the project data directory. The option on this page sets these fields to the default values on all widgets in template pages. Default values are only applied if a default for the widget and field has been set, and only in page widgets - not in sections.\r\n\r\nProject <html> background color:\r\nIn general, the background colour of pages are set in each page 'body' element, however on a slowly loading site, before the body is loaded, it can happen that a brief white page is shown.\r\nOne solution is to set a background colour in the very first 'html' element of the page. Each template page of your project has the option to set this attribute, and for all such pages, you can set the background colour here. This allows you to change this setting across the entire project without editing each page.\r\n\r\nDefault CSS links:\r\nWhen new pages are created, default CSS links can automatically be inserted into the page head section. Set the labels of the default links you wish to insert here. This saves you the trouble of editing the page heads manually every time you create a new page. The list order matches the order in which they will be added.\r\n\r\nDefault javascript links:\r\nSimilarly, when new pages are created, default javascript links can automatically be inserted into the page head section. Set the labels of the default links you wish to insert here. This list should always include 'jquery_core' and 'skipole_js' which are needed for correct operation of the framework widgets. \r\n\r\nSet CSS class in <body> tags:\r\nThe CSS class of the body tag can be set for all template pages in the project. This allows a drastic CSS change throughout the project if required.\r\n\r\nInsert a css link in each page head:\r\nGiven an element or widget description (the brief), this function finds this element in each 'head' section and inserts a CSS link before it. The target of the link being the label set here.\r\n\r\nSet CSS class in elements with given brief:\r\nGiven an element or widget description (the brief), this function finds each element in each 'body' section, and sets that element class attribute with the given CSS class.",
  "responders.checkers.Accept": "This responder 'Accepts' received raw data and calls the user submit_data function. The received data is set in the submit_dict argument beneath a key 'received_data'. This is required when received data is not in widgfield format and without ident information.",
  "responders.checkers.Accept.final_paragraph": "This responder is intended to allow an incoming call, which does not include page idents and widgfields, to submit data. The data will be in a raw dictionary with field names as keys, and values as either strings or lists of strings.\r\n\r\nAfter calling your submit_data function, the target page will be called next, which could be another responder.\r\n\r\nIf it is not a responder, typically a template page, then your end_call function will be called and the target page widget fields will be filled in from the page_data dictionary.\r\n\r\nIf your submit_data function raises a FailPage exception, then the fail page will be called instead, or if your submit_data raises a GoTo exception, a jump will be made to the page ident specified by the GoTo.",
  "responders.checkers.Accept.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'fail_ident' and 'received_data'.\r\n\r\nThe submit list is a list of strings which will appear in the 'submit_list' argument of your submit_data function. This is available for your own convenience, and can be left empty if you prefer.",
  "responders.checkers.Accept.target_ident": "The target page is the next page this call will be passed on to, typically a template page which will be returned to the calling web browser.",
  "responders.checkers.AllowStore": "Takes received data from a submitted form, and stores widgfields specified here in the dictionary 'call_data' with keys equal to the widgfield tuples submitting the data. Any other widgfield received causes the project Validation error page to be shown. Missing fields are set in call_data with empty values, but are not considered to be 'received data' and hence are not validated.",
  "responders.checkers.AllowStore.allowed_callers": "allowed_callers : An optional list of page idents which can call this responder. If the list is empty then any page ident can call the responder.\r\n\r\nThe caller is either the submitting template page (if this is the first responder) or the previous responder passing the call to this page. On failure calls the validation error page.",
  "responders.checkers.AllowStore.alternate_ident": "If this page is called directly (perhaps from an external site link or typed-in URL) and there is no calling page ident included in the received data, then rather than display an error, the call is passed to the 'alternate page' - typically the home site of your project.",
  "responders.checkers.AllowStore.fields": "This responder takes a set of widgfields. You should input a widgfield as widget name and field name separated by a comma. Or if the widget is in a section - the widgfield is specified as three elements separated by commas - section name, widget name, field name.\r\n\r\nWhen form data is received, the widgfield and its input data value are received by this responder, any widgfield present which does not appear in this list will be considered unwanted data, and will cause the project validate error page to be called. If no widgfields are given here, the caller must not submit any form data.",
  "responders.checkers.AllowStore.final_paragraph": "Unless an error has occurred, and your submit_data function has not redirected the call, this responder will now pass the data to the target page, which could be another responder, or a page to be returned, such as a JSON or template page.",
  "responders.checkers.AllowStore.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'alternate_ident' and 'fail_ident'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.AllowStore.submit_option": "If the submit option is enabled, then this responder will call your submit_data function.",
  "responders.checkers.AllowStore.target_ident": "Unless any error occurs, the target page is the next page this call will normally be passed on to, typically a template page which will be returned to the calling web browser.",
  "responders.checkers.AllowStore.validate_option": "If the validate option below is enabled, when the form data consisting of widgfields and their contents are received, these contents will be run through validation tests. This requires that the widgfields in the calling page have validators applied to them, which is done by editing the widget fields when designing the calling page. If the validation fails, the data will not be transferred to call_data and the 'validate fail' page specified here will be called.",
  "responders.checkers.AllowStoreKeyed": "Takes received data from a submitted form, and stores widgfields specified here in the dictionary 'call_data' with keys set here. Any other widgfield received causes the project Validation error page to be shown. Missing fields are set in call_data with empty values, but are not considered to be 'received data' and hence are not validated.",
  "responders.checkers.AllowStoreKeyed.allowed_callers": "allowed callers : An optional list of page idents which can call this responder. If the list is empty then any page ident can call the responder.\r\n\r\nThe caller is either the submitting template page (if this is the first responder) or the previous responder passing the call to this page. On failure calls the validation error page.",
  "responders.checkers.AllowStoreKeyed.alternate_ident": "If this page is called directly (perhaps from an external site link or typed-in URL) and there is no calling page ident included in the received data, then rather than display an error, the call is passed to the 'alternate page' - typically the home site of your project.",
  "responders.checkers.AllowStoreKeyed.fields": "The submitted contents of widgfields specified here will be stored in the call_data dictionary under the corresponding keys set here.\r\n\r\nThe widgfields are strings of widgetname, fieldname - or if the widget is in a section, sectionaliasname,widgetname,fieldname.\r\n\r\nThe keys are any string you prefer.",
  "responders.checkers.AllowStoreKeyed.final_paragraph": "This responder is typically used to provide a key in call_data independent of the widget sending the data, and may be useful in a situation where different pages may submit the same data parameter which is handled by a common submit_data function.",
  "responders.checkers.AllowStoreKeyed.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'alternate_ident' and 'fail_ident'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.AllowStoreKeyed.submit_option": "If the submit option is enabled, then this responder will call your submit_data function.",
  "responders.checkers.AllowStoreKeyed.target_ident": "Unless any error occurs, the target page is the next page this call will normally be passed on to, typically a template page which will be returned to the calling web browser.",
  "responders.checkers.AllowStoreKeyed.validate_option": "If the validate option below is enabled, when the form data consisting of widgfields and their contents are received, these contents will be run through validation tests. This requires that the widgfields in the calling page have validators applied to them, which is done by editing the widget fields when designing the calling page. If the validation fails, the data will not be transferred to call_data and the 'validate fail' page specified here will be called.",
  "responders.checkers.AllowedAccept": "Places received data into submit_dict under key 'received_data', unlike Accept, the caller page must provide its ident otherwise alternate page is called. Received data keys are widgfield tuples. Calls the user submit_data function.",
  "responders.checkers.AllowedAccept.allowed_callers": "allowed callers : An optional list of page idents which can call this responder. If the list is empty then any page ident can call the responder.\r\n\r\nThe caller is either the submitting template page (if this is the first responder) or the previous responder passing the call to this page. On failure calls the validation error page.",
  "responders.checkers.AllowedAccept.alternate_ident": "If this page is called directly (perhaps from an external site link or typed-in URL) and there is no calling page ident included in the received data, then rather than display an error, the call is passed to the 'alternate page' - typically the home site of your project.",
  "responders.checkers.AllowedAccept.final_paragraph": "Any widgfields from any allowed page can be accepted. The caller page must provide its ident, and the received field keys are widgfield tuples.\r\n\r\nAfter calling your submit_data function, the target page will be called next, which could be another responder.\r\n\r\nIf it is not a responder, typically a template page, then your end_call function will be called and the target page widget fields will be filled in from the page_data dictionary.\r\n\r\nIf your submit_data function raises a FailPage exception, then the fail page will be called instead, or if your submit_data raises a GoTo exception, a jump will be made to the page specified by the GoTo.",
  "responders.checkers.AllowedAccept.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'alternate_ident', 'fail_ident' and 'received_data'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.AllowedAccept.target_ident": "Unless any error occurs, the target page is the next page this call will normally be passed on to, typically a template page which will be returned to the calling web browser.",
  "responders.checkers.AllowedFields": "Takes a list of widgfields. Any which do not appear in the received form data will be assumed received with an empty value, and will pass through validation tests if set. If any widgfield is received which is NOT in this list, it will be considered unwanted data, and will cause the project validate error page to be called. If the submit data option is True, then received data is placed in the submit_dict argument under key 'received_data', which itself contains a dictionary of widgfield tuples against values.",
  "responders.checkers.AllowedFields.allowed_callers": "allowed callers : An optional list of page idents which can call this responder. If the list is empty then any page ident can call the responder.\r\n\r\nThe caller is either the submitting template page (if this is the first responder) or the previous responder passing the call to this page. On failure calls the validation error page.",
  "responders.checkers.AllowedFields.alternate_ident": "alternate page : If the calling page gives no ident information - for example if the call originates from another site, then go to this page.",
  "responders.checkers.AllowedFields.fields": "This responder takes a set of widgfields. You should input a widgfield as widget name and field name separated by a comma. Or if the widget is in a section - the widgfield is specified as three elements separated by commas - section name, widget name, field name.\r\n\r\nWhen form data is received, the widgfield and its input data value are received by this responder, any widgfield present which does not appear in this list will be considered unwanted data, and will cause the project validate error page to be called. If no widgfields are given here, the caller must not submit any form data.\r\n\r\nIf any of the widgfields set here are not present in the received form data, they will be added, with empty string values.",
  "responders.checkers.AllowedFields.final_paragraph": "Unless an error has occurred, and your submit_data function has not redirected the call, this responder will now pass the data to the target page, which could be another responder, or a page to be returned, such as a JSON or template page.",
  "responders.checkers.AllowedFields.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'alternate_ident' and 'fail_ident'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.AllowedFields.submit_option": "If the submit option is enabled, then this responder will call your submit_data function.",
  "responders.checkers.AllowedFields.target_ident": "target page : The ident of the page which, on success, this responder passes the call onto. Note - the target could be another responder which will continue to process the call.",
  "responders.checkers.AllowedFields.validate_option": "If the validate option below is enabled, when the form data consisting of widgfields and their contents are received, these contents will be run through validation tests. This requires that the widgfields in the calling page have validators applied to them, which is done by editing the widget fields when designing the calling page. If the validation fails the 'validate fail' page specified here will be called.",
  "responders.checkers.PageData": "Sets widgfield:values given here to be inserted into the page_data dictionary.",
  "responders.checkers.PageData.fields": "Set a widgfield as the page_data dictionary key, such as widgetname, fieldname and a value. Only string values can be accepted - so this responder cannot set boolean, lists or dictionaries. Use your python functions to set such items.",
  "responders.checkers.PageData.final_paragraph": "Normally page_data is populated via your own code, however this responder may be useful where some simple static values need to be set, perhaps depending on the page called.",
  "responders.checkers.PageData.target_ident": "Target Page: The label or ident of the page this call is to be passed to.",
  "responders.checkers.PrettyFormData": "Places a pretty print string of received widgfield:value's form data into submit_dict with key 'form_data' and pretty print of received raw data into submit_dict with key 'raw_data' and calls user submit_data function.",
  "responders.checkers.PrettyFormData.final_paragraph": "This responder is typically used for test and diagnostic purposes, the pretty print strings could be placed into a widget as text to be displayed on a page.",
  "responders.checkers.PrettyFormData.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'fail_ident', 'form_data' and 'raw_data'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.PrettyFormData.target_ident": "Target Page : The ident or label of the page which this responder passes the call onto. Note - the target could be another responder which will continue to process the call.",
  "responders.checkers.StoreData": "For widgfields set here, takes the data from the submitted form, and stores them in the dictionary call_data with keys equal to widgfield tuples submitting the data. Other widgfield received are not set into call_data. Fields set here but not received are set in call_data with empty values, but are not assumed to be submitted and hence are not validated.",
  "responders.checkers.StoreData.fields": "This responder takes a set of widgfields. You should input a widgfield as widget name and field name separated by a comma. Or if the widget is in a section - the widgfield is specified as three elements separated by commas - section name, widget name, field name.",
  "responders.checkers.StoreData.final_paragraph": "This responder is useful to store a subset of the data received, without causing an error if further widgfields, not specified here, are also received.",
  "responders.checkers.StoreData.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident' and 'fail_ident'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.StoreData.submit_option": "If the submit option is enabled, then this responder will call your submit_data function.",
  "responders.checkers.StoreData.target_ident": "Target Page : The ident or label of the page which, on success, this responder passes the call onto. Note - the target could be another responder which will continue to process the call.",
  "responders.checkers.StoreData.validate_option": "If the validate option below is enabled, when the form data consisting of widgfields and their contents are received, these contents will be run through validation tests. This requires that the widgfields in the calling page have validators applied to them, which is done by editing the widget fields when designing the calling page. If the validation fails, the data will not be transferred to call_data and the 'validate fail' page specified here will be called. Note: as mentioned above, validation is not applied to missing fields.",
  "responders.checkers.StoreDataKeyed": "For widgfields set here, takes the data from the submitted form, and stores them in the dictionary call_data.  The dictionary keys used to store these are the values given to the widgfields here.  Other widgfield received are not set into call_data. Missing fields are set in call_data with empty values, but are not inserted into received data and hence not validated.",
  "responders.checkers.StoreDataKeyed.fields": "Please input one or more widgfields, and associated key values.  When data is submitted to this responder, the submitted contents of these widgfields will be added to the call_data dictionary with these keys.",
  "responders.checkers.StoreDataKeyed.final_paragraph": "Please note - this responder does not necessarily move all the submitted data into call_data, it only moves data from the widgfields specified.",
  "responders.checkers.StoreDataKeyed.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident' and 'fail_ident'.\r\n\r\nWhen submitted to your submit_data function, any strings set here will be set in the 'submit_list' argument.  These are for your own convenience, and are typically used to identify the source of the call.",
  "responders.checkers.StoreDataKeyed.submit_option": "If the submit option is enabled, then this responder will call your submit_data function.",
  "responders.checkers.StoreDataKeyed.target_ident": "Target Page : The ident or label of the page which, on success, this responder passes the call onto. Note - the target could be another responder which will continue to process the call.",
  "responders.checkers.StoreDataKeyed.validate_option": "If the validate option below is enabled, the widgfields specified here will have their submitted contents validated.  Note - this validation is done on the server, and requires that the widgfields in the calling page have validators applied to them. If the validation fails, the data will not be transferred to call_data and the 'validate fail' page specified here will be called.",
  "responders.navigators.CaseSwitch": "Checks a single submitted widgfield content against a list, and if a match occurs, passes the call to an associated page (or responder). If there is no match, the page (or responder) specified by 'alternate_ident' will be called.",
  "responders.navigators.CaseSwitch.alternate_ident": "alternate_ident: If no match is found, the call goes to the page set here, as either an ident, label or url. However this is not considered an error, and no error message will be raised.",
  "responders.navigators.CaseSwitch.fields": "A list of possible values submitted in the widgfield with corresponding target pages to go to. The target pages can be idents, labels or urls",
  "responders.navigators.CaseSwitch.final_paragraph": "The outcome of this responder is that the call is passed on to a further page (which could be another responder) depending on the value submitted.",
  "responders.navigators.CaseSwitch.widgfield": "The widgfield which is to have its contents checked must be specified, set the widget name and field name separated by a comma. (Or section name, widget name, field name if the widget is part of a section).",
  "responders.navigators.DelCallDataItem": "For a single given key in call_data; if present, that key:value will be deleted from call_data.",
  "responders.navigators.DelCallDataItem.fields": "Set the key string in call_data which is to be deleted.",
  "responders.navigators.DelCallDataItem.final_paragraph": "This responder may be required if an item in call_data is likely to cause problems in a subsequent responder.",
  "responders.navigators.DelCallDataItem.target_ident": "The target page is the ident or label of the page to go to after the key:value has been deleted.",
  "responders.navigators.EmptyCallDataGoto": "For a single given key in the call_data dictionary, if call_data has that key with an empty value or the key is not present, then passes the call to the target page, otherwise passes the call to the alternate page.",
  "responders.navigators.EmptyCallDataGoto.alternate_ident": "Alternate page: The ident or label of the page to go to if call_data has that key with an non-empty value.",
  "responders.navigators.EmptyCallDataGoto.fields": "fields: The entry here is the key of call_data to check.",
  "responders.navigators.EmptyCallDataGoto.final_paragraph": "Typically used to choose different pages to show depending on a field set in call_data.",
  "responders.navigators.EmptyCallDataGoto.target_ident": "Target Page: The ident or label of the page to go to if call_data has that key with an empty value or the key is not present.",
  "responders.navigators.EmptyGoto": "For the given widgfield, if the received form data has that widgfield with an empty value or the widgfield is not present, then passes the call to the target page, otherwise passes the call to the alternate page.",
  "responders.navigators.EmptyGoto.allowed_callers": "A list of allowed caller pages can be set here, if any value is given then a call from any other page not listed will produce the project validate error page.",
  "responders.navigators.EmptyGoto.alternate_ident": "Given a Widgfield set above, checks its presence and contents. If the received form contains the widgfield with data, then pass the call on to the Alternate Page.",
  "responders.navigators.EmptyGoto.final_paragraph": "If a call to this responder is made without page ident data (such as from a page that submits no data), then the project validation error page will be returned.",
  "responders.navigators.EmptyGoto.target_ident": "If the Widgfield is not present, or contains empty data then pass the call on to the Target page.",
  "responders.navigators.EmptyGoto.widgfield": "widgfield: A widget name and field name separated by a comma. This framework will accept this as a tuple of 'widgetname, fieldname'. This defines the field submitted by the original calling template page which is to be checked.",
  "responders.navigators.NoOperation": "Passes the call on to the target page.",
  "responders.navigators.NoOperation.final_paragraph": "Can be used to give an alternate URL to a target page, or as a placeholder while a site is under development, to eventually be replaced later by another responder.",
  "responders.navigators.NoOperation.target_ident": "Target Page: The ident or label of the page this call will be passed to.",
  "responders.submitters.ColourSubstitute": "Calls your submit_data function which should return a dictionary of {keystring : css_colour, ...}. These colours will be inserted into a target css page substituting the colours for the keystrings.",
  "responders.submitters.ColourSubstitute.final_paragraph": "This responder calls your submit_data function and expects it to return a dictionary.  The dictionary keys should be strings, and the values should be CSS colour strings such as '#FF0000'.  This dictionary is not the 'page_data' dictionary, it should be specifically returned by your submit_data function. \r\n\r\nThe target page of this responder should be a CSS page, you should compose the CSS page to have the keystrings instead of colours in it.  Each keystring should be enclosed in dollar-curly braces, for example ${my_key_string}\r\n\r\nThe responder takes the target CSS page, and substitutes the colour value where the ${keystring} is - hence setting colours in the final CSS page returned. This allows colours to be set dynamically via your submit_data function.",
  "responders.submitters.ColourSubstitute.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'target_ident' and 'fail_ident'.\r\n\r\nsubmit_list: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.ColourSubstitute.target_ident": "The target page of this responder should be a CSS page generated by this framework, not a static CSS file page, as the framework is not yet able to parse external CSS pages.",
  "responders.submitters.FieldStoreSubmit": "Calls your submit_data function. Takes received form data with a field specified here (regardless of widget name - only uses field name to choose data), and stores the received data in the argument submit_dict under key 'received', with value being a dictionary with keys being the widgfield tuples of the submitting widgets, and values being the data.",
  "responders.submitters.FieldStoreSubmit.fields": "Set the fieldname to be searched for.",
  "responders.submitters.FieldStoreSubmit.final_paragraph": "Please note that data is inserted into a dictionary held within submit_dict['received'], not call_data.",
  "responders.submitters.FieldStoreSubmit.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'field' containing the field name to test, 'target_ident', 'fail_ident' and 'received'.\r\n\r\nsubmit_list: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.FieldStoreSubmit.target_ident": "After submit_data is called, the call is passed on to the target page (unless submit_data raises an exception to divert the call elsewhere).",
  "responders.submitters.GetDictionaryDefaults": "Web browsers do not send empty fields, therefore a submitted dictionary may have items missing. This responder calls your submit_data function which should return the expected dictionary with default values. Any missing fields in the received form data are then filled in with these defaults.  Any dictionary key received which is not in the default dictionary will cause the project validate error page to be called.",
  "responders.submitters.GetDictionaryDefaults.allowed_callers": "Allowed Callers : An optional list of page idents which can call this responder. If the list is empty then any page can call the responder.",
  "responders.submitters.GetDictionaryDefaults.fail_ident": "fail_ident: If you raise a FailPage exception in your submit_data function then the fail_ident page will be called.",
  "responders.submitters.GetDictionaryDefaults.final_paragraph": "This Responder is only valid for a widgfield that is used to send a dictionary.",
  "responders.submitters.GetDictionaryDefaults.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident', 'fail_ident' and 'widgfield'.\r\n\r\nSubmit List: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.GetDictionaryDefaults.target_ident": "Target Page : The ident or label of the page which, on success, this responder passes the call onto. Note - the target could be another responder which will continue to process the call.",
  "responders.submitters.GetDictionaryDefaults.widgfield": "widgfield : The widgfield which will contain the dictionary, input as a widget name and field name separated by a comma, or if the widget is contained within a section; as section name, widget name and field name.",
  "responders.submitters.LanguageCookie": "Calls submit_data and sets a language cookie, that will appear as the preferred language in the 'lang' tuple.",
  "responders.submitters.LanguageCookie.final_paragraph": "Calls submit_data and expects a string to be returned which will be sent with the returned page as a 'language' cookie. The string should be of the standard language tag format, such as 'en' or 'fr-CA'. This will appear in subsequent calls as the preferred language in the 'lang' tuple. The cookie will be set to expire after 30 days.",
  "responders.submitters.LanguageCookie.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident' and 'fail_ident'.\r\n\r\nSubmit List: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.LanguageCookie.target_ident": "Target Page: The next page or responder this call will be passed on to.",
  "responders.submitters.MediaQuery": "This responder applies a set of Media Queries against target SubmitCSS or CSS pages, setting their contents within media query blocks, and returns an aggregate CSS page of all the blocks.",
  "responders.submitters.MediaQuery.alternate_ident": "If no target page is given, or not recognised, the page given by alternate ident will be returned by this responder.",
  "responders.submitters.MediaQuery.fields": "You should submit a number of media query strings, with targets. So a media string may be something like :\r\n\r\n@media (max-width: 960px)\r\n\r\nand the associated target will be the ident or label of a SubmitCSS responder or CSS page.  Please note: NOT a static CSS file, this framework does not currently extract contentents from such a file.\r\n\r\nGiven a number of such queries, the CSS file returned will be a single file containing each of the targets, wrapped in the appropriate media query block.",
  "responders.submitters.MediaQuery.final_paragraph": "If the submit_data option is chosen, your submit_data should return a dictionary with keys being media query strings (starting with @media..) and values should be page idents or labels of target SubmitCSS responders or CSS pages.",
  "responders.submitters.MediaQuery.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'fail_ident' and 'media_target' being a dictionary of media queries with target idents.\r\n\r\nsubmit_list: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.MediaQuery.submit_option": "If the submit_data option is enabled, this responder will call your submit_data function which can return a dictionary to update the fields above with further media query:target pairs.",
  "responders.submitters.SetCookies": "Calls submit_data which should return a http.cookies.BaseCookie or http.cookies.SimpleCookie object containing the cookies which will be set in the returned page.",
  "responders.submitters.SetCookies.allowed_callers": "A list of allowed caller pages can be set here, if any value is given then a call from any other page not listed will produce the project validate error page.",
  "responders.submitters.SetCookies.final_paragraph": "Your code should import the cookies module from the standard library.\r\n\r\nfrom http import cookies\r\n\r\nAnd then your submit_data would typically create a cookies.SimpleCookie object and populate it with the cookies you require to send to the client browser - read the library documentation for details.\r\n\r\nsubmit_data should return the SimpleCookie object, and these cookies will be sent, and in subsequent calls will be returned as key:value strings in the 'received_cookies' dictionary which is an argument to your start_call function.\r\n\r\nThis allows you to specify cookies with the name, value, path and expiration times you require. Be aware that if you use a feature of SimplCookie that has been added in a recent version of Python - you will need to run your project on a web server with that version or later.\r\n",
  "responders.submitters.SetCookies.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident' and 'fail_ident'.\r\n\r\nSubmit List: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.SetCookies.target_ident": "Target Page : The ident or label of the page which this responder passes the call onto. Note - the target could be another responder which will continue to process the call.",
  "responders.submitters.SubmitCSS": "This responder create a new CSS file. It calls the submit_data function which should return a style which will be set into a dynamically created CSS page. The page_type argument of the end_call function will be SubmitCSS.",
  "responders.submitters.SubmitCSS.final_paragraph": "The style returned by submit_data should be an ordered dictionary with keys being css selectors and values being a list of two element lists acting as css declaration blocks.",
  "responders.submitters.SubmitCSS.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action and 'fail_ident'.\r\n\r\nsubmit_list: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.SubmitData": "This responder is used in conjunction with previous responders that validates and stores form data in call_data. It calls your submit_data function which should set a dictionary of widgfields:values suitable for the target page in page_data. The function should return None.",
  "responders.submitters.SubmitData.fail_ident": "fail_ident: If you raise a FailPage exception in your submit_data function then the fail_ident page will be called.",
  "responders.submitters.SubmitData.final_paragraph": "After calling your submit_data function, the target page will be called next, which could be another responder.\r\n\r\nIf it is not a responder, typically a template page, then your end_call function will be called and the target page widget fields will be filled in from the page_data dictionary.\r\n\r\nIf your submit_data function raises a FailPage exception, then the fail page will be called instead, or if your submit_data raises a GoTo exception, a jump will be made to the page specified by the GoTo.",
  "responders.submitters.SubmitData.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, 'target_ident' and 'fail_ident'.\r\n\r\nSubmit List: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.SubmitData.target_ident": "Target Page: The ident or label of the page this responder will pass the call to, it could be another responder which in turn will pass the call ultimately to a template or JSON page etc.",
  "responders.submitters.SubmitIterator": "The submit_data function called by this responder should return a binary iterator. The page_type argument of the end_call function will be SubmitIterator.",
  "responders.submitters.SubmitIterator.final_paragraph": "The page_data dictionary can optionally set 'status' and 'headers', or 'mimetype' and 'content-length' if 'headers' is not set.",
  "responders.submitters.SubmitIterator.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, and 'fail_ident'.\r\n\r\nsubmit_list: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.SubmitJSON": "This responder is intended to provide JSON data as a service to an external application. Your submit_data should return a dictionary, not widgfields, but any data you like which can be transformed to JSON. The page_type argument of the end_call function will be SubmitJSON.",
  "responders.submitters.SubmitJSON.final_paragraph": "Typically used to provide JSON data to an external request that does not expect widgfields. Returns a JSON file with header 'content-type application/json'.",
  "responders.submitters.SubmitJSON.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, and 'fail_ident'.\r\n\r\nSubmit List: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "responders.submitters.SubmitPlainText": "This responder is intended to provide plain text as a service to an external application. Your submit_data function should return a string which will be set as the returned contents. The page_type argument of the end_call function will be SubmitPlainText.",
  "responders.submitters.SubmitPlainText.final_paragraph": "Returns a page of plain text, not HTML, with header 'content-type text/plain'.",
  "responders.submitters.SubmitPlainText.submit_list": "When your function submit_data is called, it will have arguments submit_dict and submit_list. The submit_dict dictionary will have keys 'project', containing the project name, 'proj_data' with the proj_data dictionary, 'option' with the project option value, 'rootproject' a boolean True if this is the root project, 'brief' with the project brief description, 'environ' containing the environ dictionary, 'error_dict' which is normally empty but will contain widgfields and values which have failed validation tests if this is the fail responder of a validation action, and 'fail_ident'.\r\n\r\nSubmit List: An optional set of strings which you may use, they will appear in the submit_list argument of the submit_data function.",
  "skipole.py intro": "Skipole is a web framework, allowing you to create web folders, pages and widgets. These interact with three python functions which you provide. You now have the option of opening a pre-existing project, or creating a new one.",
  "validators.basic.AllowedValuesOnly": "Automatic fail - only passes the allowed values list.",
  "validators.basic.AllowedValuesOrEmpty": "Checks the value is in the allowed values list or is empty.",
  "validators.basic.AlphaNumDotUnder": "Checks the value is alphanumric, dot or underscore only.",
  "validators.basic.AlphaNumUnder": "Checks the value is alphanumric or underscore only.",
  "validators.basic.IntMinMax": "Check integer, limit value to between min and max value, fail if input is not an integer string but if it is, and is beyond the range, then does not cause a fail, just limits the integer size.",
  "validators.basic.IntMinMax.maxval": "This should be an integer, being the maximum value the input can take.",
  "validators.basic.IntMinMax.minval": "This should be an integer, being the minimum value the input can take.",
  "validators.basic.MaxLength": "Checks the length of the submitted value is equal or less than the maximum value given.",
  "validators.basic.MaxLength.maxlength": "The submitted string must have a length equal or less than the integer value given here.",
  "validators.basic.MinLength": "Checks the length of the submitted value is equal or greater than the minimum value given.",
  "validators.basic.MinLength.minlength": "The submitted string must have a length equal or greater than the integer value given here.",
  "validators.basic.NotEmpty": "Checks the submitted value is not empty.",
  "validators.basic.Search": "Regular expression; passes if pattern search found.",
  "validators.basic.Search.pattern": "This is the regular expression, it should be valid for both javascript (on the client side) and Python (on the server side). If a search of this pattern is found, the test is passed.",
  "validators.basic.module": "Basic validators - for simple checks.",
  "validators.description": "This field can accept one or more validators, these are simple data checks that are tested on the value submitted from the form.",
  "validators.description2": "If one or more Validators are added to this field, the form should call a Responder that runs the validation tests on submitted data.\r\n\r\nTypically the validated data will then be stored by the Responder in the call_data dictionary and passed to your submit_data function.",
  "validators.description3": "The display widget is the name of the widget, which, if given, will be used to display the error message should one occur. %s",
  "validators.description4": "A validator can have a list of allowed values, any of these submitted in the field will immediately be passed, anything other than these values must go through the actual validation test.  Do not use 'secret' or back door values here - this list is embedded in the javascript of the page, and can be viewed by a client simply by inspecting the page source code. The purpose of this list is to allow specific exemptions to the test which may be useful in rare circumstances.",
  "validators.description5": "This validator takes the following arguments, choose edit to set the argument value.",
  "validators.modules": "Validators are defined in the following modules, choose a module:",
  "validators.paths.IdentExists": "Checks a given ident exists.",
  "validators.paths.IdentExists.can_be_empty": "If True, an empty value input will be accepted.",
  "validators.paths.IdentExists.is_folder": "If True, the check passes if the given ident is that of a Folder.",
  "validators.paths.IdentExists.is_page": "If True, the check passes if the given ident is that of a page (a page being a template, responder, filepage etc.,).",
  "validators.paths.NameNotInFolder": "Check a name does not already exist in a given folder.",
  "validators.paths.NameNotInFolder.folder_ident_field": "Set the ident of the folder you wish to check.",
  "validators.paths.PathLeadingTrailingSlashes": "Ensures leading or trailing slashes are in the given path.",
  "validators.paths.ProjectLoaded": "Check a given project is loaded.",
  "validators.paths.module": "Validators for site folder and page checks.",
  "widgets.arg_dict_desc": "This field can have its name changed (alphanumeric and underscore only) if desired.  The value can be set at run time via the page_data dictionary, with a key of the tuple (\"%s\") and the value being the dictionary to insert here.\r\n\r\nNote: If the widget is contained in a section, the page_data tuple key should be expanded to three elements, with the first element being the section alias within the page.",
  "widgets.arg_list_desc": "This field can have its name changed (alphanumeric and underscore only) if desired.  The value can be set at run time via the page_data dictionary with a key of the tuple (\"%s\") and the value being the list to be set into this field.\r\n\r\nNote: If the widget is contained in a section, the page_data tuple key should be expanded to three elements, with the first element being the section alias within the page.",
  "widgets.arg_table_desc": "This field can have its name changed (alphanumeric and underscore only) if desired.  The value can be set at run time via the page_data dictionary with a key of the tuple (\"%s\") and the value being a list of lists described above.\r\n\r\nNote: If the widget is contained in a section, the page_data tuple key should be expanded to three elements, with the first element being the section alias within the page.",
  "widgets.args_desc": "This field can have its name changed (alphanumeric and underscore only) if desired.\r\nThe value can be set here, and can also be changed at run time by setting the page_data dictionary with a key of the tuple (\"%s\") and the value being the new value to insert in this field.\r\nNote: If the widget is contained in a section, the page_data tuple key should be expanded to three elements, with the first element being the section alias within the page.",
  "widgets.checkbox.CheckBox1": "A checkbox in a div - but without a form or submit button, typically included within a form.\r\nOn error, a paragraph above the checkbox will display the error message.",
  "widgets.checkbox.CheckBox1.checkbox": "The name of the checkbox, with the value returned.",
  "widgets.checkbox.CheckBox1.checkbox.full": "The name of the checkbox, set the value of this field to the string which will be returned if the checkbox is ticked. Validators can be added to this field.",
  "widgets.checkbox.CheckBox1.checkbox_class": "The CSS class of the checkbox element.",
  "widgets.checkbox.CheckBox1.checked": "True if checkbox ticked, False otherwise.",
  "widgets.checkbox.CheckBox1.checked.full": "Set this field to True if the checkbox is to be shown ticked, False if unticked.",
  "widgets.checkbox.CheckBox1.div_class": "The CSS class applied to the div after the error paragraph.",
  "widgets.checkbox.CheckBox1.div_class.full": "The CSS class applied to the div which contains the label and checkbox, and is after the hidden error paragraph.",
  "widgets.checkbox.CheckBox1.error_class": "The CSS class applied to the normally hidden error paragraph.",
  "widgets.checkbox.CheckBox1.error_class.full": "The CSS class applied to the normally hidden error paragraph.",
  "widgets.checkbox.CheckBox1.left_class": "The css class of the label to the left of the checkbox.",
  "widgets.checkbox.CheckBox1.left_class.full": "The css class of the label tag to the left of the checkbox. If the field is empty, no class attribute is set.",
  "widgets.checkbox.CheckBox1.left_label": "The text displayed to the left of the checkbox.",
  "widgets.checkbox.CheckBox1.left_label.full": "The text displayed to the left of the checkbox within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the checkbox input tag.",
  "widgets.checkbox.CheckBox1.right_class": "The css class of the label to the right of the checkbox.",
  "widgets.checkbox.CheckBox1.right_class.full": "The css class of the label tag to the right of the checkbox. If the field is empty, no class attribute is set.",
  "widgets.checkbox.CheckBox1.right_label": "The text displayed to the right of the checkbox.",
  "widgets.checkbox.CheckBox1.right_label.full": "The text displayed to the right of the checkbox within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the checkbox input tag.",
  "widgets.checkbox.CheckBox2": "A checkbox in a span - but without a form or submit button, typically included within a form. Does not display errors.",
  "widgets.checkbox.CheckBox2.checkbox": "The name of the checkbox, with the value returned.",
  "widgets.checkbox.CheckBox2.checkbox.full": "The name of the checkbox, set the value of this field to the string which will be returned if the checkbox is ticked. Validators can be added to this field.",
  "widgets.checkbox.CheckBox2.checkbox_class": "The CSS class of the checkbox element.",
  "widgets.checkbox.CheckBox2.checked": "True if checkbox ticked, False otherwise.",
  "widgets.checkbox.CheckBox2.checked.full": "Set this field to True if the checkbox is to be shown ticked, False if unticked.",
  "widgets.checkbox.CheckBox2.left_class": "The css class of the label to the left of the checkbox.",
  "widgets.checkbox.CheckBox2.left_class.full": "The css class of the label tag to the left of the checkbox. If the field is empty, no class attribute is set.",
  "widgets.checkbox.CheckBox2.left_label": "The text displayed to the left of the checkbox.",
  "widgets.checkbox.CheckBox2.left_label.full": "The text displayed to the left of the checkbox within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the checkbox input tag.",
  "widgets.checkbox.CheckBox2.right_class": "The css class of the label to the right of the checkbox.",
  "widgets.checkbox.CheckBox2.right_class.full": "The css class of the label tag to the right of the checkbox. If the field is empty, no class attribute is set.",
  "widgets.checkbox.CheckBox2.right_label": "The text displayed to the right of the checkbox.",
  "widgets.checkbox.CheckBox2.right_label.full": "The text displayed to the right of the checkbox within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the checkbox input tag.",
  "widgets.checkbox.CheckInputs": "A div holding a checkbox with a container to hold further input fields. Without a form or submit button, typically included within a form.\r\nThe checkbox controls contained text input fields (not other types of input) which must initially be set as enabled/disabled to match the checkbox state.\r\nThe input fields are only enabled when the checkbox is checked, requires javascript enabled on the client browser.",
  "widgets.checkbox.CheckInputs.checkbox": "The name of the checkbox, with the value returned. The value is normally left empty, as the checkbox purpose is to enable the contained fields, however if a value is given, it is returned if checked when the containing form is submitted.",
  "widgets.checkbox.CheckInputs.checkbox_class": "The CSS class of the checkbox element.",
  "widgets.checkbox.CheckInputs.checked": "True if checkbox ticked, False otherwise, JSON settable. Contained input fields must initially be set appropriately.",
  "widgets.checkbox.CheckInputs.container0": "Further html and widgets can be placed here.",
  "widgets.checkbox.CheckInputs.container_class": "The CSS class attribute of the div tag of the container holding further elements.",
  "widgets.checkbox.CheckInputs.div_class": "The CSS class attribute of the inner div holding input fields.",
  "widgets.checkbox.CheckInputs.error_class": "The CSS class applied to the normally hidden error paragraph.",
  "widgets.checkbox.CheckInputs.label_class": "The CSS class applied to the label to the left of the checkbox element.",
  "widgets.checkbox.CheckInputs.label_text": "The label text applied to the left of the checkbox element.",
  "widgets.checkbox.CheckedText": "Checkbox and text input field, the checkbox enables or disables the text field. No form or submit capability, intended for insertion into a form.",
  "widgets.checkbox.CheckedText.checkbox": "The field name is the field part of the widgfield data submitted, with the value returned, if any.",
  "widgets.checkbox.CheckedText.checkbox_class": "The CSS class applied to the checkbox element.",
  "widgets.checkbox.CheckedText.checked": "True if checkbox ticked, and the text input field is enabled, False if unticked and the input field disabled. JSON settable.",
  "widgets.checkbox.CheckedText.error_class": "The CSS class applied to the normally hidden error div.",
  "widgets.checkbox.CheckedText.input_class": "The CSS class of the text input field.",
  "widgets.checkbox.CheckedText.input_text": "The text appearing in the text input field. The field name is used as the field part of the widgfield submitted.",
  "widgets.checkbox.CheckedText.inputdiv_class": "The CSS class applied to the inner div holding the input fields.",
  "widgets.checkbox.CheckedText.label_class": "The CSS class applied to the label to the left of the checkbox.",
  "widgets.checkbox.CheckedText.label_text": "Label text shown on the left of the checkbox element.",
  "widgets.checkbox.CheckedText.maxlength": "The maximum number of characters accepted in the text area.",
  "widgets.checkbox.CheckedText.size": "The number of characters appearing in the text input area.",
  "widgets.checkbox.SubmitCheckBox1": "A form with a checkbox input field, and four hidden fields. Submit button follows input field in a span.",
  "widgets.checkbox.SubmitCheckBox1.action": "The form destination, if action_json not set - either a responder page ident or label.",
  "widgets.checkbox.SubmitCheckBox1.action.full": "This field sets the 'action' attribute of the form tag. Either a responder page ident, or page label (if the target responder page has been given a label) should be input here, and at run time this will be converted to the correct URL.  Normally you would set the action to call a responder page - or the first in a series of responders, that check the correct fields have been submitted, validates them, stores the results in the call_data dictionary, then submits the data to your code.",
  "widgets.checkbox.SubmitCheckBox1.action_json": "The form destination - either a responder page ident or label, requires JSON page returned.",
  "widgets.checkbox.SubmitCheckBox1.button_class": "The class of the submit button.",
  "widgets.checkbox.SubmitCheckBox1.button_class.full": "The class of the submit button. This gives the opportunity to define a button via CSS.",
  "widgets.checkbox.SubmitCheckBox1.button_text": "The text on the button.",
  "widgets.checkbox.SubmitCheckBox1.button_text.full": "The text on the button.",
  "widgets.checkbox.SubmitCheckBox1.checkbox": "The name of the checkbox, with the value returned.",
  "widgets.checkbox.SubmitCheckBox1.checkbox.full": "The name of the checkbox, set the value of this field to the string which will be returned if the checkbox is ticked. Validators can be added to this field.",
  "widgets.checkbox.SubmitCheckBox1.checkbox_class": "The CSS class of the checkbox element.",
  "widgets.checkbox.SubmitCheckBox1.checked": "True if checkbox ticked, False otherwise, JSON settable.",
  "widgets.checkbox.SubmitCheckBox1.error_class": "The class applied to the div containing the error message on error.",
  "widgets.checkbox.SubmitCheckBox1.error_class.full": "The class applied to the normally hidden div containing the paragraph and error message. On error this div is displayed.",
  "widgets.checkbox.SubmitCheckBox1.hidden_field1": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field1.full": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field2": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field2.full": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field3": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field3.full": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field4": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hidden_field4.full": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.checkbox.SubmitCheckBox1.hide": "If True, widget is hidden. Can be set by JSON.",
  "widgets.checkbox.SubmitCheckBox1.hide.full": "If True the widget is hidden, if False it is displayed. As it is JSON settable this can be used to dynamically hide or display a widget via JSON.",
  "widgets.checkbox.SubmitCheckBox1.inputandbutton_class": "The class of the span containing the checkbox field and submit button",
  "widgets.checkbox.SubmitCheckBox1.inputdiv_class": "The class of the div containing label, checkbox field and submit button.",
  "widgets.checkbox.SubmitCheckBox1.label": "The text displayed to the left of the checkbox.",
  "widgets.checkbox.SubmitCheckBox1.label.full": "The text displayed to the left of the checkbox within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the checkbox.",
  "widgets.checkbox.SubmitCheckBox1.label_class": "The css class of the label to the left of the checkbox.",
  "widgets.checkbox.SubmitCheckBox1.label_class.full": "The css class of the label tag to the left of the checkbox.",
  "widgets.checkbox.module": "Checkbox widgets and forms.",
  "widgets.clear_error": "If the widget is showing an error, clears the error display.",
  "widgets.clear_error.full": "If True, clears the widget error display. For template pages, and the default setting here, this is normally always False as widget are usually displayed either cleared or in error as required.\r\nThis is generally only used when sending a JSON file and you wish to clear the error condition on the page currently displayed on the client browser.",
  "widgets.confirm.AlertClear1": "A div with a paragraph of text, or error text and one X button which auto hides the div without making a call if javascript is available, if not, then a link is called.",
  "widgets.confirm.AlertClear1.boxdiv_class": "The CSS class of the box holding paragraph and button.",
  "widgets.confirm.AlertClear1.button_class": "The class of the div the X link button.",
  "widgets.confirm.AlertClear1.buttondiv_class": "The class of the div holding the button.",
  "widgets.confirm.AlertClear1.buttondiv_style": "The CSS style of the div holding the button.",
  "widgets.confirm.AlertClear1.error_class": "The CSS class which replaces inner_class of the paragraph on error.",
  "widgets.confirm.AlertClear1.get_field1": "First get field applied to the button. JSON settable.",
  "widgets.confirm.AlertClear1.get_field2": "Second get field applied to the button. JSON settable.",
  "widgets.confirm.AlertClear1.get_field3": "Third get field applied to the button. JSON settable.",
  "widgets.confirm.AlertClear1.hide": "If True, sets display: none; on the widget, can be set/unset via JSON.",
  "widgets.confirm.AlertClear1.inner_class": "The CSS class of the div holding the paragraph, replaced by error_class on error.",
  "widgets.confirm.AlertClear1.inner_style": "The CSS style of the div holding the paragraph.",
  "widgets.confirm.AlertClear1.link_ident": "The ident or label of the link to be called on button press - only if javascript is disabled on the client browser.",
  "widgets.confirm.AlertClear1.para_text": "The text appearing in the paragraph, JSON settable. Replaced on error by the error message.",
  "widgets.confirm.AlertClear1.pre_line": "If True, sets style=\"white-space: pre-line;\" into the paragraph which preserves new line breaks.",
  "widgets.confirm.ConfirmBox1": "A div with a paragraph of text and two buttons, each can call JSON or HTML targets.",
  "widgets.confirm.ConfirmBox1.boxdiv_class": "CSS class of div holding text and buttons.",
  "widgets.confirm.ConfirmBox1.button1_class": "The CSS class of the first button.",
  "widgets.confirm.ConfirmBox1.button1_style": "The CSS style of the first button.",
  "widgets.confirm.ConfirmBox1.button2_class": "The CSS class of the second button.",
  "widgets.confirm.ConfirmBox1.button2_style": "The CSS style of the second button.",
  "widgets.confirm.ConfirmBox1.button_text1": "Text shown on the first button.",
  "widgets.confirm.ConfirmBox1.button_text2": "Text shown on the second button.",
  "widgets.confirm.ConfirmBox1.buttondiv_class": "CSS class of div holding the two buttons.",
  "widgets.confirm.ConfirmBox1.get_field1_1": "First get field of the first button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox1.get_field1_2": "Second get field of the first button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox1.get_field1_3": "Third get field of the first button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox1.get_field2_1": "First get field of the second button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox1.get_field2_2": "Second get field of the second button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox1.get_field2_3": "Third get field of the second button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox1.hide": "If True, sets display: none; on the widget, can be set/unset via JSON file.",
  "widgets.confirm.ConfirmBox1.json_ident1": "The link ident or label of the first button JSON target, if given does not call link_ident1.",
  "widgets.confirm.ConfirmBox1.json_ident2": "The link ident or label of the second button JSON target, if given does not call link_ident2.",
  "widgets.confirm.ConfirmBox1.link_ident1": "The link ident or label of the first button HTML target.",
  "widgets.confirm.ConfirmBox1.link_ident2": "The link ident or label of the second button HTML target.",
  "widgets.confirm.ConfirmBox1.para_class": "CSS class of the text paragraph.",
  "widgets.confirm.ConfirmBox1.para_text": "The paragraph text, can be set by JSON.",
  "widgets.confirm.ConfirmBox1.paradiv_class": "CSS class of div holding the text paragraph.",
  "widgets.confirm.ConfirmBox2": "A div with a paragraph of text and two buttons. One button auto hides the div.",
  "widgets.confirm.ConfirmBox2.boxdiv_class": "CSS class of div holding text and buttons.",
  "widgets.confirm.ConfirmBox2.button1_class": "The CSS class of the first button.",
  "widgets.confirm.ConfirmBox2.button1_style": "The CSS style of the first button.",
  "widgets.confirm.ConfirmBox2.button2_class": "The CSS class of the second button.",
  "widgets.confirm.ConfirmBox2.button2_style": "The CSS style of the second button.",
  "widgets.confirm.ConfirmBox2.button_text1": "Text shown on the first button.",
  "widgets.confirm.ConfirmBox2.button_text2": "Text shown on the second button.",
  "widgets.confirm.ConfirmBox2.buttondiv_class": "CSS class of div holding the two buttons.",
  "widgets.confirm.ConfirmBox2.get_field1_1": "First get field of the first button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox2.get_field1_2": "Second get field of the first button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox2.get_field1_3": "Third get field of the first button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox2.get_field2_1": "First get field of the second button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox2.get_field2_2": "Second get field of the second button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox2.get_field2_3": "Third get field of the second button. Can be set by JSON.",
  "widgets.confirm.ConfirmBox2.hide": "If True, sets display: none; on the widget, can be set/unset via JSON file.",
  "widgets.confirm.ConfirmBox2.link_ident1": "The link ident or label of the first button target.",
  "widgets.confirm.ConfirmBox2.link_ident2": "The link ident or label of the second button target.",
  "widgets.confirm.ConfirmBox2.para_class": "CSS class of the text paragraph.",
  "widgets.confirm.ConfirmBox2.para_text": "The paragraph text, can be set by JSON.",
  "widgets.confirm.ConfirmBox2.paradiv_class": "CSS class of div holding the text paragraph.",
  "widgets.confirm.module": "Buttons and links providing options to confirm, accept, cancel.",
  "widgets.css_default_desc": "The value specified can be set as a default value for the Widget and field for this project. Any new widgets of this type will initially be set with this value.\r\n\r\nThis enables a project to be created, which, together with a page that can be copied and a CSS file, can act as a 'template' project.",
  "widgets.debug_tools.ShowCallData": "A div showing the call_data dictionary. This widget is only displayed if debug mode is ON.",
  "widgets.debug_tools.ShowCallData.error_class": "The CSS class applied to the normally hidden error div.",
  "widgets.debug_tools.ShowCallData.para_class": "The CSS class of an optional text paragraph appearing above the call_data display.",
  "widgets.debug_tools.ShowCallData.show": "If True, and debug mode is ON, the widget is included in the page. Otherwise the widget is removed.",
  "widgets.debug_tools.ShowCallData.toptext": "Text appearing in an optional paragraph above the displayed call_data.",
  "widgets.debug_tools.ShowEnviron": "A div showing the environ dictionary. This widget is only displayed if debug mode is ON.",
  "widgets.debug_tools.ShowEnviron.error_class": "The CSS class applied to the normally hidden error div.",
  "widgets.debug_tools.ShowEnviron.para_class": "The CSS class of an optional text paragraph appearing above the environ display.",
  "widgets.debug_tools.ShowEnviron.show": "If True, and debug mode is ON, the widget is included in the page. Otherwise the widget is removed.",
  "widgets.debug_tools.ShowEnviron.toptext": "Text appearing in an optional paragraph above the displayed environ dictionary.",
  "widgets.debug_tools.ShowResponders": "A div containing a table with columns showing the responders called to access this page. This widget is only displayed if debug mode is ON.",
  "widgets.debug_tools.ShowResponders.error_class": "The CSS class applied to the normally hidden div containing the error message.",
  "widgets.debug_tools.ShowResponders.para_class": "CSS class applied to optional paragraph of text.",
  "widgets.debug_tools.ShowResponders.paradiv_class": "CSS class applied to the div containing the optional paragraph of text.",
  "widgets.debug_tools.ShowResponders.show": "If True, and debug mode is ON, the widget is included in the page. Otherwise the widget is removed.",
  "widgets.debug_tools.ShowResponders.table_class": "The CSS class applied to the table element.",
  "widgets.debug_tools.ShowResponders.toptext": "Optional text appearing in the paragraph above the table.",
  "widgets.debug_tools.module": "Used to aid debugging, for example, displaying the environ dictionary.",
  "widgets.dropdown.DropDown1": "A div holding a drop down input field. Without a form or submit button, typically included within a form.",
  "widgets.dropdown.DropDown1.div_class": "CSS class of the inner div holding the input field and labels.",
  "widgets.dropdown.DropDown1.error_class": "The CSS class applied to the normally hidden error div.",
  "widgets.dropdown.DropDown1.left_class": "CSS class applied to the label on the left of the dropdown input field.",
  "widgets.dropdown.DropDown1.left_label": "Text on the label on the left of the dropdown input field.",
  "widgets.dropdown.DropDown1.option_list": "A list of options to appear in the dropdown field.",
  "widgets.dropdown.DropDown1.right_class": "CSS class applied to the label on the right of the dropdown input field.",
  "widgets.dropdown.DropDown1.right_label": "Text on the label on the right of the dropdown input field.",
  "widgets.dropdown.DropDown1.select_class": "The CSS class applied to the select tag of the dropdown.",
  "widgets.dropdown.DropDown1.selectvalue": "The option selected, this field name is used as the field of the widgfield sent when the containing form is submitted.",
  "widgets.dropdown.SubmitDropDown1": "Defines a form with a drop down input field, and four hidden fields.",
  "widgets.dropdown.SubmitDropDown1.action": "The label or ident of the target page for the form. Called if action_json is not set or the client browser has javascript disabled.",
  "widgets.dropdown.SubmitDropDown1.action_json": "If set, and if the client browser has javascript enabled, this target label or ident is called when the form is submitted, the target should return a JSON page.",
  "widgets.dropdown.SubmitDropDown1.button_class": "The CSS class of the submit button.",
  "widgets.dropdown.SubmitDropDown1.button_text": "The text appearing on the submit button.",
  "widgets.dropdown.SubmitDropDown1.disabled": "Set True if the select field and submit button are to be disabled.",
  "widgets.dropdown.SubmitDropDown1.error_class": "The CSS class applied to the normally hidden div containing the error message on error.",
  "widgets.dropdown.SubmitDropDown1.hidden_field1": "A hidden field sent with the form submission, leave blank if unused. The field name used as the field part of the widgfield.",
  "widgets.dropdown.SubmitDropDown1.hidden_field2": "A second hidden field sent with the form submission, leave blank if unused. The field name used as the field part of the widgfield.",
  "widgets.dropdown.SubmitDropDown1.hidden_field3": "A third hidden field sent with the form submission, leave blank if unused. The field name used as the field part of the widgfield.",
  "widgets.dropdown.SubmitDropDown1.hidden_field4": "A fourth hidden field sent with the form submission, leave blank if unused. The field name used as the field part of the widgfield.",
  "widgets.dropdown.SubmitDropDown1.hide": "If True, hides the widget, JSON settable.",
  "widgets.dropdown.SubmitDropDown1.inputdiv_class": "The CSS class of the div holding label, dropdown and button.",
  "widgets.dropdown.SubmitDropDown1.label": "Text on the label on the left of the dropdown input field.",
  "widgets.dropdown.SubmitDropDown1.label_class": "CSS class applied to the label on the left of the dropdown input field.",
  "widgets.dropdown.SubmitDropDown1.option_list": "A list of options to appear in the dropdown field.",
  "widgets.dropdown.SubmitDropDown1.select_class": "The CSS class applied to the select tag of the dropdown.",
  "widgets.dropdown.SubmitDropDown1.selectvalue": "The option selected, this field name is used as the field of the widgfield sent when the form is submitted.",
  "widgets.dropdown.module": "Widgets displaying dropdown forms.",
  "widgets.error_messages.ErrorClear1": "Hidden div holding inner divs of text and clear button which hides the widget.",
  "widgets.error_messages.ErrorClear1.boxdiv_class": "CSS class of a div within the widget div.",
  "widgets.error_messages.ErrorClear1.boxdiv_class.full": "CSS class of a div within the widget div. Can be used together with the widget div to create a modal box",
  "widgets.error_messages.ErrorClear1.button_class": "The CSS class of the clear button.",
  "widgets.error_messages.ErrorClear1.button_text": "Button text on the clear button.",
  "widgets.error_messages.ErrorClear1.buttondiv_class": "CSS class of inner div holding the clear button.",
  "widgets.error_messages.ErrorClear1.buttondiv_style": "CSS style of inner div holding the clear button.",
  "widgets.error_messages.ErrorClear1.error_class": "CSS class of inner div holding the paragraph of text.",
  "widgets.error_messages.ErrorClear1.get_field1": "Optional get field data sent by the clear button if no javascript. JSON settable.",
  "widgets.error_messages.ErrorClear1.get_field2": "Optional get field data sent by the clear button if no javascript. JSON settable.",
  "widgets.error_messages.ErrorClear1.get_field3": "Optional get field data sent by the clear button if no javascript. JSON settable.",
  "widgets.error_messages.ErrorClear1.hide": "Normally True, which hides the widget.",
  "widgets.error_messages.ErrorClear1.hide.full": "Normally set to True, which hides the widget by setting display:none; on the widget. If False, the widget is displayed. This field can be set or unset via JSON. When an error is raised on the widget this hide value is overidden, and the widget and message is displayed.",
  "widgets.error_messages.ErrorClear1.link_ident": "Called by the clear button if no javascript.",
  "widgets.error_messages.ErrorClear1.link_ident.full": "Normally the clear button hides the widget using javascript, and no call is made. If the client browser has javascript disabled, then a call to this ident is made.",
  "widgets.error_messages.ErrorClear1.para_text": "Text shown if no error raised, Can be set by JSON.",
  "widgets.error_messages.ErrorClear1.pre_line": "If True, preserves new line breaks in the text.",
  "widgets.error_messages.ErrorClear2": "Hidden div holding inner div of error message and X button which hides the widget.",
  "widgets.error_messages.ErrorClear2.boxdiv_class": "CSS class of a div within the widget div.",
  "widgets.error_messages.ErrorClear2.boxdiv_class.full": "CSS class of a div within the widget div. Can be used together with the widget div to create a modal box",
  "widgets.error_messages.ErrorClear2.button_class": "The CSS class of the X button.",
  "widgets.error_messages.ErrorClear2.buttondiv_class": "CSS class of inner div holding the X button.",
  "widgets.error_messages.ErrorClear2.buttondiv_style": "CSS style of inner div holding the X button.",
  "widgets.error_messages.ErrorClear2.error_class": "CSS class of inner div holding the paragraph of text.",
  "widgets.error_messages.ErrorClear2.get_field1": "Optional get field data sent by the clear button if no javascript. JSON settable.",
  "widgets.error_messages.ErrorClear2.get_field2": "Optional get field data sent by the clear button if no javascript. JSON settable.",
  "widgets.error_messages.ErrorClear2.get_field3": "Optional get field data sent by the clear button if no javascript. JSON settable.",
  "widgets.error_messages.ErrorClear2.hide": "Normally True, which hides the widget.",
  "widgets.error_messages.ErrorClear2.hide.full": "Normally set to True, which hides the widget by setting display:none; on the widget. If False, the widget is displayed. This field can be set or unset via JSON. When an error is raised on the widget this hide value is overidden, and the widget and message is displayed.",
  "widgets.error_messages.ErrorClear2.link_ident": "Called by the clear button if no javascript.",
  "widgets.error_messages.ErrorClear2.link_ident.full": "Normally the clear button hides the widget using javascript, and no call is made. If the client browser has javascript disabled, then a call to this ident is made.",
  "widgets.error_messages.ErrorClear2.pre_line": "If True, preserves new line breaks in the error message.",
  "widgets.error_messages.ErrorCode": "A div with paragraph showing an error code, and text paragraph showing text replaced by error message on error.",
  "widgets.error_messages.ErrorCode.code": "Integer number which will be displayed in the first paragraph",
  "widgets.error_messages.ErrorCode.code_class": "The CSS class applied to the paragraph containing the code number.",
  "widgets.error_messages.ErrorCode.error_class": "The CSS class given to the text paragraph when an error is displayed. Replaces para_class.",
  "widgets.error_messages.ErrorCode.para_class": "The CSS class applied to the text paragraph.",
  "widgets.error_messages.ErrorCode.para_text": "The text appearing in the paragraph, can be set by JSON. Replaced by the error message when the widget displays an error.",
  "widgets.error_messages.ErrorCode.pre_line": "If True, sets style=\"white-space: pre-line;\" into the text paragraph which preserves new line breaks in the text.",
  "widgets.error_messages.ErrorDiv": "A div containing a paragraph containing error text - normally the div is hidden.\r\nOn displaying an error, the paragraph text is changed to the error message and\r\nthe div is made visible.",
  "widgets.error_messages.ErrorDiv.error_class": "The CSS class of the paragraph.",
  "widgets.error_messages.ErrorDiv.error_class.full": "Sets the CSS class of the paragraph (not the outside div).",
  "widgets.error_messages.ErrorDiv.hide": "Normally True, which hides the widget.",
  "widgets.error_messages.ErrorDiv.hide.full": "Normally set to True, which hides the widget by setting display:none; on the widget. If False, the widget is displayed. This field can be set or unset via JSON. When an error is raised on the widget this hide value is overidden, and the widget and message is displayed.",
  "widgets.error_messages.ErrorPara": "A paragraph containing error text - normally hidden, displayed on error.",
  "widgets.error_messages.ErrorPara.hide": "Normally True, which hides the widget.",
  "widgets.error_messages.ErrorPara.hide.full": "Normally set to True, which hides the widget by setting display:none; on the widget. If False, the widget is displayed. This field can be set or unset via JSON. When an error is raised on the widget this hide value is overidden, and the widget and message is displayed.",
  "widgets.error_messages.module": "Used to display error messages.",
  "widgets.footers.SimpleFooter": "A div, holding a paragraph of text.",
  "widgets.footers.SimpleFooter.error_class": "CSS class set to the first paragraph within the div. This paragraph is normally hidden, and shown on error.",
  "widgets.footers.SimpleFooter.error_class.full": "CSS class set to the first paragraph within the div. This paragraph is normally hidden, and shown on error and displays the error message.",
  "widgets.footers.SimpleFooter.footer_text": "The footer text. Can be set by JSON.",
  "widgets.footers.SimpleFooter.footer_text.full": "The footer text to be shown in the second paragraph within the div. As the first paragraph is normally hidden, this text is the text on show. It can also be set via a JSON file.",
  "widgets.footers.SimpleFooter.para_class": "The CSS class set on the footer paragraph, which holds the footer text.",
  "widgets.footers.SimpleFooter.para_class.full": "The CSS class applied to the footer paragraph which contains the footer text.",
  "widgets.footers.SimpleFooter.paradiv_class": "CSS class of the inner div containing the footer paragraph.",
  "widgets.footers.module": "Defines widgets which may be used as, or within, page footers",
  "widgets.headers.DropDownButton1": "A div, button and links, typically used for a drop down list of links.",
  "widgets.headers.DropDownButton1.button_class": "The CSS class applied to the button.",
  "widgets.headers.DropDownButton1.button_style": "The style applied to the button.",
  "widgets.headers.DropDownButton1.button_text": "The text shown on the button.",
  "widgets.headers.DropDownButton1.div_class": "CSS class of the inner div containing the links.",
  "widgets.headers.DropDownButton1.link_class": "CSS Class applied to each link.",
  "widgets.headers.DropDownButton1.nav_links": "A list of lists, each inner list describing a link.",
  "widgets.headers.DropDownButton1.nav_links.full": "A list of lists, each inner list describing a link, the name of this field is used in the widgfield for any data returned in the get field\r\nFor each navigation link, the inner list elements are:\r\n0 : The url, label or ident of the target page of the link\r\n1 : The displayed text of the link\r\n2 : If True, ident is appended to link even if there is no get field\r\n3 : The get field data to send with the link",
  "widgets.headers.HeadText": "A tag which can be specified, (typically 'h1'), containing text.",
  "widgets.headers.HeadText.large_text": "The text appearing in the tag.",
  "widgets.headers.HeadText.tag": "The tag of the element, such as h1.",
  "widgets.headers.HeaderErrorPara": "A paragraph containing error text - normally hidden, displayed on error.",
  "widgets.headers.HeaderErrorPara.hide": "If True, hides the widget, can be set/unset via JSON. On error the value is overridden and the widget is shown.",
  "widgets.headers.HeaderText1": "A div containing h1 text, followed by a paragraph of text, and a normally hidden error paragraph.  The h1 and p text are JSON settable.",
  "widgets.headers.HeaderText1.error_class": "The CSS class applied to the normally hidden div containing an error paragraph.",
  "widgets.headers.HeaderText1.large_text": "The text within the h1 tags, JSON settable.",
  "widgets.headers.HeaderText1.show_error": "Default error text in the error paragraph, replaced by the error message when the widget displays an error.",
  "widgets.headers.HeaderText1.small_text": "The text within the p tags, JSON settable.",
  "widgets.headers.HeaderText2": "A div containing h2 text, followed by a paragraph of text, and a normally hidden error paragraph.  The h2 and p text are JSON settable.",
  "widgets.headers.HeaderText2.error_class": "The CSS class applied to the normally hidden div containing an error paragraph.",
  "widgets.headers.HeaderText2.large_text": "The text within the h2 tags, JSON settable.",
  "widgets.headers.HeaderText2.show_error": "Default error text in the error paragraph, replaced by the error message when the widget displays an error.",
  "widgets.headers.HeaderText2.small_text": "The text within the p tags, JSON settable.",
  "widgets.headers.HeaderText3": "A div containing h3 text, followed by a paragraph of text, and a normally hidden error paragraph.  The h3 and p text are JSON settable.",
  "widgets.headers.HeaderText3.error_class": "The CSS class applied to the normally hidden div containing an error paragraph.",
  "widgets.headers.HeaderText3.large_text": "The text within the h3 tags, JSON settable.",
  "widgets.headers.HeaderText3.show_error": "Default error text in the error paragraph, replaced by the error message when the widget displays an error.",
  "widgets.headers.HeaderText3.small_text": "The text within the p tags, JSON settable.",
  "widgets.headers.HeaderText4": "A div containing h4 text, followed by a paragraph of text, and a normally hidden error paragraph.  The h4 and p text are JSON settable.",
  "widgets.headers.HeaderText4.error_class": "The CSS class applied to the normally hidden div containing an error paragraph.",
  "widgets.headers.HeaderText4.large_text": "The text within the h4 tags, JSON settable.",
  "widgets.headers.HeaderText4.show_error": "Default error text in the error paragraph, replaced by the error message when the widget displays an error.",
  "widgets.headers.HeaderText4.small_text": "The text within the p tags, JSON settable.",
  "widgets.headers.HeaderText5": "A div containing h5 text, followed by a paragraph of text, and a normally hidden error paragraph.  The h5 and p text are JSON settable.",
  "widgets.headers.HeaderText5.error_class": "The CSS class applied to the normally hidden div containing an error paragraph.",
  "widgets.headers.HeaderText5.large_text": "The text within the h5 tags, JSON settable.",
  "widgets.headers.HeaderText5.show_error": "Default error text in the error paragraph, replaced by the error message when the widget displays an error.",
  "widgets.headers.HeaderText5.small_text": "The text within the p tags, JSON settable.",
  "widgets.headers.HeaderText6": "A div containing h6 text, followed by a paragraph of text, and a normally hidden error paragraph.  The h6 and p text are JSON settable.",
  "widgets.headers.HeaderText6.error_class": "The CSS class applied to the normally hidden div containing an error paragraph.",
  "widgets.headers.HeaderText6.large_text": "The text within the h6 tags, JSON settable.",
  "widgets.headers.HeaderText6.show_error": "Default error text in the error paragraph, replaced by the error message when the widget displays an error.",
  "widgets.headers.HeaderText6.small_text": "The text within the p tags, JSON settable.",
  "widgets.headers.NavButtons1": "A div, with a normally hidden error paragraph followed by a list of navigation buttons.",
  "widgets.headers.NavButtons1.button_class": "The CSS class of the button links.",
  "widgets.headers.NavButtons1.error_class": "The CSS class of the normally hidden div holding the error paragraph.",
  "widgets.headers.NavButtons1.li_class": "The CSS class of the li elements.",
  "widgets.headers.NavButtons1.nav_links": "A list of lists. Each inner list describing a link, the name of this field is used as the widgfield for any data returned in the get field of the links.",
  "widgets.headers.NavButtons1.nav_links.full": "A list of lists. Each inner list describing a link, the name of this field is used as the widgfield for any data returned in the get field of the links.\r\n\r\nEach inner list should have four elements:\r\n\r\n 0 : The url, label or ident of the target page of the link\r\n 1 : The displayed text of the link\r\n 2 : If True, ident_data is sent with the link even if there is no get field data\r\n 3 : The get field data to send with the link\r\n",
  "widgets.headers.NavButtons1.ul_class": "The CSS class of the ul elements.",
  "widgets.headers.NavButtons2": "Defines a div, containing multiple navigation button links.",
  "widgets.headers.NavButtons2.button_class": "The CSS class of the button links.",
  "widgets.headers.NavButtons2.button_style": "The CSS style set on the button links.",
  "widgets.headers.NavButtons2.nav_links": "A list of lists, each inner list describing a link.",
  "widgets.headers.NavButtons2.nav_links.full": "A list of lists, each inner list describing a link, the name of this field is used in the widgfield for any data returned in the get field\r\nFor each navigation link, the inner list elements are:\r\n0 : The url, label or ident of the target page of the link\r\n1 : The displayed text of the link\r\n2 : If True, ident is appended to link even if there is no get field\r\n3 : The get field data to send with the link",
  "widgets.headers.TabButtons1": "A div, containing tab buttons which can hide/display portions of the page.",
  "widgets.headers.TabButtons1.active_button": "The button index (starting at 0) of the button which is currently active.",
  "widgets.headers.TabButtons1.active_button.full": "The button index (starting at 0) of the button which is currently active. Can be set by JSON, if the index is out of range, no button will be active, and all associated page elements will be hidden.",
  "widgets.headers.TabButtons1.button_class": "The CSS class of the buttons.",
  "widgets.headers.TabButtons1.button_style": "The button style.",
  "widgets.headers.TabButtons1.hide_class": "CSS class applied to page elements normally hidden.",
  "widgets.headers.TabButtons1.hide_class.full": "The CSS class given here should be set on those page elements to be controlled. Normally all such elements will be hidden, and will only be displayed when an appropriate tab button is pressed.",
  "widgets.headers.TabButtons1.onclick_addclass": "CSS class to add to a button when it is clicked.",
  "widgets.headers.TabButtons1.onclick_removeclass": "CSS class to remove from a button when it is clicked.",
  "widgets.headers.TabButtons1.tabs": "A list of lists, each inner list being (button text, id of item to display).",
  "widgets.headers.TabButtons1.tabs.full": "A list of lists, an inner list being supplied for each button. Each inner list has two elements:\n0 - The text to appear on the button\n1 - The id of the item to display when the button is pressed.",
  "widgets.headers.module": "Widgets to be typically used in a page header section.",
  "widgets.info.PageDescription": "A widget containing the page brief description of the given ident which is set within the text. If no page ident is given, shows the brief of the current page.",
  "widgets.info.PageDescription.page_ident": "The ident of a page or folder, the brief description of this item will be displayed.",
  "widgets.info.PageDescription.span_text": "Any text set here will override the page description. JSON settable.",
  "widgets.info.PageIdent": "A span displaying the ident of the page containing the widget. The ident can be overwriiten if the field page_ident is given a value. ",
  "widgets.info.PageIdent.page_ident": "Normally left empty, but if set to a tuple 'projectname',pagenumber it will display those values.",
  "widgets.info.PageIdent.span_text": "If given, overrides the page_ident value, JSON settable.",
  "widgets.info.PageName": "A widget containing the name of the given page ident which is set within the text. If no page ident is given, shows name of the current page.",
  "widgets.info.PageName.page_ident": "The ident of a page or folder.",
  "widgets.info.PageName.span_text": "If given, overrides the page name, JSON settable.",
  "widgets.info.ProjectName": "A span showing the name of the project the page is in.",
  "widgets.info.Redirector": "A widget containing javascript which redirects the page to the given url.\r\nOnce the page is loaded, the redirection occurs, so normally this is the only widget on the page.\r\nA TextBlock is displayed with the link to the url if the client has javascript disabled.",
  "widgets.info.Redirector.text_refnotfound": "If the TextBlock is not found, this text is used instead.",
  "widgets.info.Redirector.text_replaceblock": "If text is set here, it will be used instead of a TextBlock.",
  "widgets.info.Redirector.textblock_ref": "The reference of a TextBlock which is displayed with the link to the url if the client has javascript disabled.",
  "widgets.info.Redirector.url": "The external URL to which this widget will redirect.\nShould include the http:// prefix.",
  "widgets.info.ServerTimeStamp": "A span containing the server date and time.",
  "widgets.info.ServerTimeStamp.timestamp": "Normally empty, any text given here will replace the automatically generated timestamp. JSON settable.",
  "widgets.info.ServerTimeStamp.utc": "If True, time is UTC, if False it is server local time",
  "widgets.info.SkipoleVersion": "A span showing the version of the skipole framework.",
  "widgets.info.Version": "A span showing the project version of the page it is in.",
  "widgets.info.module": "Widgets which display information - for example timestamp, page ident, etc.",
  "widgets.inputforms.Form1": "A form, initially without content, used to contain further input fields and submit button.",
  "widgets.inputforms.Form1.action": "The page ident, label or url this form links to.",
  "widgets.inputforms.Form1.container0": "This widget is a form, which normally submits one or more input fields. You can insert further input widgets and html here.",
  "widgets.inputforms.Form1.container_class": "The CSS class attribute of the div tag of the container holding further elements.",
  "widgets.inputforms.Form1.enctype": "If given, sets the enctype attribute.",
  "widgets.inputforms.Form1.error_class": "CSS class applied to a normally hidden div which appears if an error is displayed by the widget.",
  "widgets.inputforms.Form1.hidden_field1": "A hidden field value, leave blank if unused.",
  "widgets.inputforms.Form1.hidden_field2": "A second hidden field value, leave blank if unused.",
  "widgets.inputforms.Form1.hidden_field3": "A third hidden field value, leave blank if unused.",
  "widgets.inputforms.Form1.hidden_field4": "A fourth hidden field value, leave blank if unused.",
  "widgets.inputforms.HiddenField": "An input field of type hidden, typically inserted into forms, the value can be set by JSON.",
  "widgets.inputforms.HiddenField.hidden_field": "This field value is the 'value' attribute of this input field to be sent when the enclosing form is submitted.",
  "widgets.inputforms.HiddenField.hidden_field.full": "Typically this widget is included in a form, and the value of this field is the value returned to the server when the form is submitted. The value can be set here, or via a Responder, or by a JSON call.",
  "widgets.inputforms.HiddenLocalStorage": "An input field of type hidden, typically inserted into forms, the value taken from browser local storage.",
  "widgets.inputforms.HiddenLocalStorage.local_key": "The local storage key which specifies the value to be submitted in the field. JSON settable.",
  "widgets.inputforms.HiddenSessionStorage": "An input field of type hidden, typically inserted into forms, the value taken from browser session storage.",
  "widgets.inputforms.HiddenSessionStorage.session_key": "The session storage key which specifies the value to be submitted in the field. JSON settable.",
  "widgets.inputforms.SubmitButton1": "An input field of type submit, with name attribute, for use as an insert into form widgets",
  "widgets.inputforms.SubmitButton1.button_text": "Submitted with the value attribute as the button text, and the name attribute being the 'button_text' widgfield.",
  "widgets.inputforms.SubmitButton2": "An input field of type submit, no name, so does not submit a widgfield, for use as an insert into form widgets",
  "widgets.inputforms.SubmitButton2.button_text": "Button with value of the \"button_text\" value, but no name, so does not submit a widgfield.",
  "widgets.inputforms.SubmitForm1": "A form taking contents with submit button and four hidden fields - generally used with\r\nfurther input fields set within it.",
  "widgets.inputforms.SubmitForm1.action": "The form destination - a responder page ident or label. This is called if action_json is not set, or if the client does not have javascript enabled. A full HTML page should be returned.",
  "widgets.inputforms.SubmitForm1.action.full": "This field sets the 'action' attribute of the form tag. Either a responder page ident, or page label (if the target responder page has been given a label) should be input here, and at run time this will be converted to the correct URL.  Normally you would set the action to call a responder page - or the first in a series of responders, that check the correct fields have been submitted, validates them, stores the results in the call_data dictionary, then submits the data to your code.",
  "widgets.inputforms.SubmitForm1.action_json": "If a value set, and the client has javascript enabled, this is the page ident or label this form calls, expects a json page back.",
  "widgets.inputforms.SubmitForm1.button_class": "The CSS class of the submit button.",
  "widgets.inputforms.SubmitForm1.button_text": "The text on the submit button.",
  "widgets.inputforms.SubmitForm1.button_wait_text": "Text placed on button once submitted.",
  "widgets.inputforms.SubmitForm1.container0": "Content can be placed immediately within the form tag (after the hidden error div), generally useful for setting input fields, which will be submitted with the form.",
  "widgets.inputforms.SubmitForm1.container_class": "The CSS class attribute of the div tag of the container holding further elements.",
  "widgets.inputforms.SubmitForm1.div_class": "The CSS class attribute of the div tag which contains the label and button.",
  "widgets.inputforms.SubmitForm1.enctype": "If given, Sets the enctype attribute.",
  "widgets.inputforms.SubmitForm1.error_class": "The CSS class applied to the paragraph containing the error message on error.",
  "widgets.inputforms.SubmitForm1.hidden_field1": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputforms.SubmitForm1.hidden_field2": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputforms.SubmitForm1.hidden_field3": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputforms.SubmitForm1.hidden_field4": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputforms.SubmitForm1.left_class": "The class attribute of the left_label",
  "widgets.inputforms.SubmitForm1.left_label": "The label appearing adjacent and to the left of the submit button",
  "widgets.inputforms.SubmitForm1.right_class": "The class attribute of the right_label",
  "widgets.inputforms.SubmitForm1.right_label": "The label appearing adjacent and to the right of the submit button",
  "widgets.inputforms.module": "Various input forms, with submit buttons.",
  "widgets.inputtables.InputTable5": "A div containing rows of forms. Each form has label, text input field, two buttons and four hidden fields.",
  "widgets.inputtables.InputTable5.action": "The label or ident of the action responder page of the table forms. All forms call the same page.",
  "widgets.inputtables.InputTable5.button1_class": "The CSS class set on each button1.",
  "widgets.inputtables.InputTable5.button2_class": "The CSS class set on each button2.",
  "widgets.inputtables.InputTable5.button_text1": "The text appearing on the first buttons - if empty, no button 1 is shown.",
  "widgets.inputtables.InputTable5.button_text2": "The text appearing on the second buttons - if empty, no button 2 is shown.",
  "widgets.inputtables.InputTable5.col_input": "A list of text strings, to be inserted into the input fields, the length of the list defines the number of rows.",
  "widgets.inputtables.InputTable5.col_label": "A list of text strings, to be inserted into the labels, the length of the list defines the number of rows.",
  "widgets.inputtables.InputTable5.div_class": "The CSS class attribute applied to each form div.",
  "widgets.inputtables.InputTable5.hidden_field1": "A list of hidden field values, the list length should match the number of rows.",
  "widgets.inputtables.InputTable5.hidden_field2": "A second list of hidden field values, the list length should match the number of rows.",
  "widgets.inputtables.InputTable5.hidden_field3": "A third list of hidden field values, the list length should match the number of rows.",
  "widgets.inputtables.InputTable5.hidden_field4": "A fourth list of hidden field values, the list length should match the number of rows.",
  "widgets.inputtables.InputTable5.input_accepted_class": "A CSS class which can be added on each input text field, will be added if set_input_accepted is True.",
  "widgets.inputtables.InputTable5.input_class": "CSS class which can be set on each input text field.",
  "widgets.inputtables.InputTable5.input_errored_class": "A CSS class which can be added on each input text field, will be added if set_input_errored is True.",
  "widgets.inputtables.InputTable5.label_class": "The CSS class to apply to each label.",
  "widgets.inputtables.InputTable5.maxlength": "The maximum number of characters accepted in the text input fields.",
  "widgets.inputtables.InputTable5.required": "Set True to put the 'required' flag into each text input field.",
  "widgets.inputtables.InputTable5.set_input_accepted": "Dictionary of integer keys, being row indexes (zero starting) and True or False values which set the input accepted CSS class.",
  "widgets.inputtables.InputTable5.set_input_accepted.full": "A Dictionary with keys being integers, and values being either True or False. The integer number references the input row (starting at zero) - and if True, the input accepted CSS class is applied to that row input field, if False it is removed.\r\n\r\nThis allows just one, or more rows to have the CSS class set by setting the dictionary to contain just those rows to be altered.",
  "widgets.inputtables.InputTable5.set_input_errored": "Dictionary of integer keys, being row indexes (zero starting) and True or False values which set the input errored CSS class.",
  "widgets.inputtables.InputTable5.set_input_errored.full": "A Dictionary with keys being integers, and values being either True or False. The integer number references the input row (starting at zero) - and if True, the input errored CSS class is applied to that row input field, if False it is removed.\r\n\r\nThis allows just one, or more rows to have the CSS class set by setting the dictionary to contain just those rows to be altered.",
  "widgets.inputtables.InputTable5.size": "The number of characters appearing in the text input fields.",
  "widgets.inputtables.module": "Tables with input fields.",
  "widgets.inputtext.Password1": "A password input field only, no form, label or submit button. For insertion into a form widget container.",
  "widgets.inputtext.Password1.disabled": "Set True if the field is to be disabled.",
  "widgets.inputtext.Password1.disabled.full": "Set True if the field is to be disabled.",
  "widgets.inputtext.Password1.input_accepted_class": "A class which can be added to the input field.",
  "widgets.inputtext.Password1.input_accepted_class.full": "A class which will be added to the input field if 'set_input_accepted' is set to True. If widget_class is set, then this class will be added to the class list of the input field, it will not replace widget_class.",
  "widgets.inputtext.Password1.input_errored_class": "A class which can be added to the input field.",
  "widgets.inputtext.Password1.input_errored_class.full": "A class which will be added to the input field if 'set_input_errored' is set to True. If widget_class is set, then this class will be added to the class list of the input field, it will not replace widget_class.",
  "widgets.inputtext.Password1.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.Password1.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.Password1.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.Password1.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.Password1.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.Password1.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.Password1.set_input_accepted": "Enable the input_accepted class.",
  "widgets.inputtext.Password1.set_input_accepted.full": "If set to True the input_accepted_class will be added to the class list of the input field.",
  "widgets.inputtext.Password1.set_input_errored": "Enable the input_errored class.",
  "widgets.inputtext.Password1.set_input_errored.full": "If set to True the input_errored_class will be added to the class list of the input field.",
  "widgets.inputtext.Password1.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.Password1.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.Password2": "Defines a div containing a hidden error paragraph followed by a password input field (no form or submit button). A label to the left of the input field can have a class and content set.",
  "widgets.inputtext.Password2.disabled": "Set True if the field is to be disabled.",
  "widgets.inputtext.Password2.disabled.full": "Set True if the field is to be disabled.",
  "widgets.inputtext.Password2.error_class": "The class applied to the hidden paragraph on error.",
  "widgets.inputtext.Password2.error_class.full": "The CSS class applied to the hidden paragraph on error.",
  "widgets.inputtext.Password2.input_accepted_class": "A class which can be added to the input field.",
  "widgets.inputtext.Password2.input_accepted_class.full": "A class which will be added to the input field if 'set_input_accepted' is set to True. If widget_class is set, then this class will be added to the class list of the input field, it will not replace widget_class.",
  "widgets.inputtext.Password2.input_class": "The css class of the input field.",
  "widgets.inputtext.Password2.input_disabled_class": "css class of the input field which replaces input_class if disabled is True.",
  "widgets.inputtext.Password2.input_errored_class": "A class which can be added to the input field.",
  "widgets.inputtext.Password2.input_errored_class.full": "A class which will be added to the input field if 'set_input_errored' is set to True. If widget_class is set, then this class will be added to the class list of the input field, it will not replace widget_class.",
  "widgets.inputtext.Password2.input_text": "The name of the input password field, with default value.",
  "widgets.inputtext.Password2.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.Password2.inputdiv_class": "The css class of the div containing the label and input field.",
  "widgets.inputtext.Password2.label": "The text displayed to the left of the input password field.",
  "widgets.inputtext.Password2.label.full": "The text displayed to the left of the input password field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input password field.",
  "widgets.inputtext.Password2.label_class": "A CSS class for the label.",
  "widgets.inputtext.Password2.label_class.full": "A CSS class for the label",
  "widgets.inputtext.Password2.maxlength": "The maximum number of characters accepted in the password input field.",
  "widgets.inputtext.Password2.maxlength.full": "The maximum number of characters accepted in the password input field.",
  "widgets.inputtext.Password2.redstar": "If True a red asterix is shown by the side of the input field.",
  "widgets.inputtext.Password2.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.Password2.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.Password2.set_input_accepted": "Enable the input_accepted class.",
  "widgets.inputtext.Password2.set_input_accepted.full": "If set to True the input_accepted_class will be added to the class list of the input field.",
  "widgets.inputtext.Password2.set_input_errored": "Enable the input_errored class.",
  "widgets.inputtext.Password2.set_input_errored.full": "If set to True the input_errored_class will be added to the class list of the input field.",
  "widgets.inputtext.Password2.size": "The number of characters appearing in the password input field.",
  "widgets.inputtext.Password2.size.full": "The number of characters appearing in the password input field.",
  "widgets.inputtext.SubmitDict1": "A form with a list of input fields defined as dictionary keys, followed by a single submit button.",
  "widgets.inputtext.SubmitDict1.action": "The form destination - either a responder page ident or label.",
  "widgets.inputtext.SubmitDict1.button_class": "The class of the submit button.",
  "widgets.inputtext.SubmitDict1.button_class.full": "The class of the submit button. This gives the opportunity to define a button via CSS.",
  "widgets.inputtext.SubmitDict1.button_text": "The text on the button.",
  "widgets.inputtext.SubmitDict1.button_text.full": "The text on the button.",
  "widgets.inputtext.SubmitDict1.hidden_field1": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field1.full": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field2": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field2.full": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field3": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field3.full": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field4": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.hidden_field4.full": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitDict1.input_class": "CSS Class set on each input field.",
  "widgets.inputtext.SubmitDict1.input_dict": "This ordered dictionary keys define the fields, and the values are the field values.",
  "widgets.inputtext.SubmitDict1.input_dict.full": "Set this field to an ordered dictionary with keys that define the number of text input fields, and these keys will be embedded in the field names. The dictionary values will be set as the field values - use empty strings for initial empty values.\r\n\r\nOn the form being submitted, this field will form the widgfield which returns a dictionary of the same keys, with user inputted values. If any given values are empty, the submitted key will be missing from the returned dictionary.",
  "widgets.inputtext.SubmitDict1.inputdiv_class": "The CSS class of the div containing the submit button.",
  "widgets.inputtext.SubmitDict1.inputdiv_style": "The CSS style of the div containing the submit button.",
  "widgets.inputtext.SubmitDict1.li_class": "The CSS class of each li element.",
  "widgets.inputtext.SubmitDict1.li_style": "The CSS style of each li element.",
  "widgets.inputtext.SubmitDict1.ul_class": "The CSS class of the ul element.",
  "widgets.inputtext.SubmitDict1.ul_style": "The CSS style of the ul element.",
  "widgets.inputtext.SubmitTextInput1": "A form with a text input field, and four hidden fields. Submit button follows input field in a span.",
  "widgets.inputtext.SubmitTextInput1.action": "The form destination, if action_json not set - either a responder page ident or label.",
  "widgets.inputtext.SubmitTextInput1.action.full": "This field sets the 'action' attribute of the form tag. Either a responder page ident, or page label (if the target responder page has been given a label) should be input here, and at run time this will be converted to the correct URL.  Normally you would set the action to call a responder page - or the first in a series of responders, that check the correct fields have been submitted, validates them, stores the results in the call_data dictionary, then submits the data to your code.",
  "widgets.inputtext.SubmitTextInput1.action_json": "The form destination - either a responder page ident or label, requires JSON page returned.",
  "widgets.inputtext.SubmitTextInput1.button_class": "The class of the submit button.",
  "widgets.inputtext.SubmitTextInput1.button_class.full": "The class of the submit button. This gives the opportunity to define a button via CSS.",
  "widgets.inputtext.SubmitTextInput1.button_text": "The text on the button.",
  "widgets.inputtext.SubmitTextInput1.button_text.full": "The text on the button.",
  "widgets.inputtext.SubmitTextInput1.error_class": "The class applied to the div containing the error message on error.",
  "widgets.inputtext.SubmitTextInput1.error_class.full": "The class applied to the normally hidden div containing the paragraph and error message. On error this div is displayed.",
  "widgets.inputtext.SubmitTextInput1.hidden_field1": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field1.full": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field2": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field2.full": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field3": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field3.full": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field4": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hidden_field4.full": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput1.hide": "If True, widget is hidden. Can be set by JSON.",
  "widgets.inputtext.SubmitTextInput1.hide.full": "If True the widget is hidden, if False it is displayed. As it is JSON settable this can be used to dynamically hide or display a widget via JSON.",
  "widgets.inputtext.SubmitTextInput1.input_accepted_class": "Class to be set on the input field if set_input_accepted is True.",
  "widgets.inputtext.SubmitTextInput1.input_accepted_class.full": "Class to be set on the input field if set_input_accepted is True. Typically used to show an input has been submitted and accepted ok, such as a green border.",
  "widgets.inputtext.SubmitTextInput1.input_class": "CSS Class set on the input field.",
  "widgets.inputtext.SubmitTextInput1.input_errored_class": "Class to be set on the input field if set_errored_accepted is True.",
  "widgets.inputtext.SubmitTextInput1.input_errored_class.full": "Class to be set on the input field if set_errored_accepted is True. Typically used to show that a submitted value is in error, such as a red border.",
  "widgets.inputtext.SubmitTextInput1.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.SubmitTextInput1.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.SubmitTextInput1.inputandbutton_class": "The class of the span containing the input text field and submit button",
  "widgets.inputtext.SubmitTextInput1.inputdiv_class": "The class of the div containing label, input text field and submit button.",
  "widgets.inputtext.SubmitTextInput1.label": "The text displayed to the left of the input text field.",
  "widgets.inputtext.SubmitTextInput1.label.full": "The text displayed to the left of the input text field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input text field.",
  "widgets.inputtext.SubmitTextInput1.label_class": "The css class of the label to the left of the input text field.",
  "widgets.inputtext.SubmitTextInput1.label_class.full": "The css class of the label tag to the left of the input text field.",
  "widgets.inputtext.SubmitTextInput1.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.SubmitTextInput1.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.SubmitTextInput1.pattern": "If the browser supports this feature, a regular expression pattern will be tested against the input field.",
  "widgets.inputtext.SubmitTextInput1.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.SubmitTextInput1.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.SubmitTextInput1.set_input_accepted": "If True, input_accepted_class will be set on the input field.",
  "widgets.inputtext.SubmitTextInput1.set_input_errored": "If True, input_errored_class will be set on the input field.",
  "widgets.inputtext.SubmitTextInput1.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.SubmitTextInput1.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.SubmitTextInput1.target": "If given, the target attribute will be set.",
  "widgets.inputtext.SubmitTextInput1.title": "Text shown if the pattern regular expression does not match.",
  "widgets.inputtext.SubmitTextInput1.type": "The type set on the input field, such as text or email.",
  "widgets.inputtext.SubmitTextInput3": "A form with two paragraphs, a text input field, and four hidden fields. The submit button with label is set in a div after the input field.",
  "widgets.inputtext.SubmitTextInput3.action": "The form destination, if action_json not set - either a responder page ident or label.",
  "widgets.inputtext.SubmitTextInput3.action.full": "This field sets the 'action' attribute of the form tag. Either a responder page ident, or page label (if the target responder page has been given a label) should be input here, and at run time this will be converted to the correct URL.  Normally you would set the action to call a responder page - or the first in a series of responders, that check the correct fields have been submitted, validates them, stores the results in the call_data dictionary, then submits the data to your code.",
  "widgets.inputtext.SubmitTextInput3.action_json": "The form destination - either a responder page ident or label, requires JSON page returned.",
  "widgets.inputtext.SubmitTextInput3.button_class": "The class of the submit button.",
  "widgets.inputtext.SubmitTextInput3.button_class.full": "The class of the submit button. This gives the opportunity to define a button via CSS.",
  "widgets.inputtext.SubmitTextInput3.button_label": "The text of the label to the left of the submit button.",
  "widgets.inputtext.SubmitTextInput3.button_label_class": "The CSS class of the submit button label.",
  "widgets.inputtext.SubmitTextInput3.button_text": "The text on the button.",
  "widgets.inputtext.SubmitTextInput3.button_text.full": "The text on the button.",
  "widgets.inputtext.SubmitTextInput3.buttondiv_class": "The CSS class of the div holding the label and submit button.",
  "widgets.inputtext.SubmitTextInput3.error_class": "The class applied to the div containing the error message on error.",
  "widgets.inputtext.SubmitTextInput3.error_class.full": "The class applied to the normally hidden div containing a paragraph and error message. On error this div is displayed.",
  "widgets.inputtext.SubmitTextInput3.hidden_field1": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field1.full": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field2": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field2.full": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field3": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field3.full": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field4": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hidden_field4.full": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.SubmitTextInput3.hide": "If True, widget is hidden. Can be set by JSON.",
  "widgets.inputtext.SubmitTextInput3.hide.full": "If True the widget is hidden, if False it is displayed. As it is JSON settable this can be used to dynamically hide or display a widget via JSON.",
  "widgets.inputtext.SubmitTextInput3.input_accepted_class": "Class to be set on the input field if set_input_accepted is True.",
  "widgets.inputtext.SubmitTextInput3.input_accepted_class.full": "Class to be set on the input field if set_input_accepted is True. Typically used to show an input has been submitted and accepted ok, such as a green border.",
  "widgets.inputtext.SubmitTextInput3.input_class": "CSS Class set on the input field.",
  "widgets.inputtext.SubmitTextInput3.input_errored_class": "Class to be set on the input field if set_errored_accepted is True.",
  "widgets.inputtext.SubmitTextInput3.input_errored_class.full": "Class to be set on the input field if set_errored_accepted is True. Typically used to show that a submitted value is in error, such as a red border.",
  "widgets.inputtext.SubmitTextInput3.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.SubmitTextInput3.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.SubmitTextInput3.inputdiv_class": "The class of the div containing label and input text field.",
  "widgets.inputtext.SubmitTextInput3.label": "The text displayed to the left of the input text field.",
  "widgets.inputtext.SubmitTextInput3.label.full": "The text displayed to the left of the input text field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input text field.",
  "widgets.inputtext.SubmitTextInput3.label_class": "The css class of the label to the left of the input text field.",
  "widgets.inputtext.SubmitTextInput3.label_class.full": "The css class of the label tag to the left of the input text field.",
  "widgets.inputtext.SubmitTextInput3.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.SubmitTextInput3.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.SubmitTextInput3.outer_class": "The CSS class of the div holding the two paragraphs.",
  "widgets.inputtext.SubmitTextInput3.para_text": "The text of the first paragraph, JSON settable.",
  "widgets.inputtext.SubmitTextInput3.pattern": "If the browser supports this feature, a regular expression pattern will be tested against the input field.",
  "widgets.inputtext.SubmitTextInput3.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.SubmitTextInput3.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.SubmitTextInput3.set_input_accepted": "If True, input_accepted_class will be set on the input field.",
  "widgets.inputtext.SubmitTextInput3.set_input_errored": "If True, input_errored_class will be set on the input field.",
  "widgets.inputtext.SubmitTextInput3.show_para1": "If True, paragraph 1 is displayed, if False it is hidden, JSON settable.",
  "widgets.inputtext.SubmitTextInput3.show_para2": "If True paragraph 2 is displayed, if False it is hidden. JSON settable.",
  "widgets.inputtext.SubmitTextInput3.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.SubmitTextInput3.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.SubmitTextInput3.target": "If given, the target attribute will be set.",
  "widgets.inputtext.SubmitTextInput3.textblock_ref": "The reference of the TextBlock which, if given, will be set in the second paragraph.",
  "widgets.inputtext.SubmitTextInput3.title": "Text shown if the pattern regular expression does not match.",
  "widgets.inputtext.SubmitTextInput3.type": "The type set on the input field, such as text or email.",
  "widgets.inputtext.TextInput1": "An input field only, no form, label or submit button. For insertion into a form widget container.",
  "widgets.inputtext.TextInput1.disabled": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput1.disabled.full": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput1.input_accepted_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput1.input_accepted_class.full": "A class which will be added to the input field if 'set_input_accepted' is set to True. If widget_class is set, then this class will be added to the class list of the input field, it will not replace widget_class.",
  "widgets.inputtext.TextInput1.input_errored_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput1.input_errored_class.full": "A class which will be added to the input field if 'set_input_errored' is set to True. If widget_class is set, then this class will be added to the class list of the input field, it will not replace widget_class.",
  "widgets.inputtext.TextInput1.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.TextInput1.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.TextInput1.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput1.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput1.pattern": "Attribute specifies a regular expression the value is checked against.",
  "widgets.inputtext.TextInput1.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput1.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput1.set_input_accepted": "Enable the input_accepted class.",
  "widgets.inputtext.TextInput1.set_input_accepted.full": "If set to True the input_accepted_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput1.set_input_errored": "Enable the input_errored class.",
  "widgets.inputtext.TextInput1.set_input_errored.full": "If set to True the input_errored_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput1.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput1.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput1.title": "Shown if the pattern fails.",
  "widgets.inputtext.TextInput1.type": "The type attribute set on the input field, such as text or email.",
  "widgets.inputtext.TextInput2": "Defines a div containing a hidden error paragraph followed by a text input field (no form or submit button). A label to the left of the text can have a class and content set.",
  "widgets.inputtext.TextInput2.disabled": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput2.disabled.full": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput2.error_class": "The class applied to the hidden paragraph on error.",
  "widgets.inputtext.TextInput2.error_class.full": "The CSS class applied to the hidden paragraph on error.",
  "widgets.inputtext.TextInput2.input_accepted_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput2.input_accepted_class.full": "A class which will be added to the input field if 'set_input_accepted' is set to True. If widget_class is set, then this class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput2.input_class": "The css class of the input field.",
  "widgets.inputtext.TextInput2.input_disabled_class": "css class of the input field which replaces input_class if disabled is True.",
  "widgets.inputtext.TextInput2.input_errored_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput2.input_errored_class.full": "A class which will be added to the input field if 'set_input_errored' is set to True. If widget_class is set, then this class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput2.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.TextInput2.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.TextInput2.inputdiv_class": "The css class of the div containing the label and input field.",
  "widgets.inputtext.TextInput2.label": "The text displayed to the left of the input text field.",
  "widgets.inputtext.TextInput2.label.full": "The text displayed to the left of the input text field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input text field.",
  "widgets.inputtext.TextInput2.label_class": "A CSS class for the label.",
  "widgets.inputtext.TextInput2.label_class.full": "A CSS class for the label",
  "widgets.inputtext.TextInput2.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput2.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput2.pattern": "Attribute specifies a regular expression the value is checked against.",
  "widgets.inputtext.TextInput2.redstar": "If True a red asterix is shown by the side of the input field.",
  "widgets.inputtext.TextInput2.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput2.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput2.set_input_accepted": "Enable the input_accepted class.",
  "widgets.inputtext.TextInput2.set_input_accepted.full": "If set to True the input_accepted_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput2.set_input_errored": "Enable the input_errored class.",
  "widgets.inputtext.TextInput2.set_input_errored.full": "If set to True the input_errored_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput2.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput2.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput2.title": "Shown if the pattern fails.",
  "widgets.inputtext.TextInput2.type": "The type set on the input field, such as text or email.",
  "widgets.inputtext.TextInput3": "A div containing a text input field (no form or submit button) with a left and right label.",
  "widgets.inputtext.TextInput3.disabled": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput3.disabled.full": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput3.input_accepted_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput3.input_accepted_class.full": "A class which will be added to the input field if 'set_input_accepted' is set to True. If widget_class is set, then this class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput3.input_class": "The css class of the input field.",
  "widgets.inputtext.TextInput3.input_errored_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput3.input_errored_class.full": "A class which will be added to the input field if 'set_input_errored' is set to True. If widget_class is set, then this class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput3.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.TextInput3.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.TextInput3.left_class": "A CSS class for the left label.",
  "widgets.inputtext.TextInput3.left_class.full": "A CSS class for the left label",
  "widgets.inputtext.TextInput3.left_label": "The text displayed to the left of the input text field.",
  "widgets.inputtext.TextInput3.left_label.full": "The text displayed to the left of the input text field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input text field.",
  "widgets.inputtext.TextInput3.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput3.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput3.pattern": "Attribute specifies a regular expression the value is checked against.",
  "widgets.inputtext.TextInput3.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput3.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput3.right_class": "A CSS class for the right label.",
  "widgets.inputtext.TextInput3.right_class.full": "A CSS class for the right label",
  "widgets.inputtext.TextInput3.right_label": "The text displayed to the right of the input text field.",
  "widgets.inputtext.TextInput3.right_label.full": "The text displayed to the right of the input text field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input text field.",
  "widgets.inputtext.TextInput3.set_input_accepted": "Enable the input_accepted class.",
  "widgets.inputtext.TextInput3.set_input_accepted.full": "If set to True the input_accepted_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput3.set_input_errored": "Enable the input_errored class.",
  "widgets.inputtext.TextInput3.set_input_errored.full": "If set to True the input_errored_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput3.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput3.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput3.title": "Shown if the pattern fails.",
  "widgets.inputtext.TextInput3.type": "The type set on the input field, such as text or email.",
  "widgets.inputtext.TextInput4": "A div containing a div with label and a div with a text input field (no form or submit button)",
  "widgets.inputtext.TextInput4.disabled": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput4.disabled.full": "Set True if the field is to be disabled.",
  "widgets.inputtext.TextInput4.input_accepted_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput4.input_accepted_class.full": "A class which will be added to the input field if 'set_input_accepted' is set to True. If widget_class is set, then this class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput4.input_class": "The css class of the input field.",
  "widgets.inputtext.TextInput4.input_disabled_class": "css class of the input field which replaces input_class if disabled is True.",
  "widgets.inputtext.TextInput4.input_errored_class": "A class which can be added to the input field.",
  "widgets.inputtext.TextInput4.input_errored_class.full": "A class which will be added to the input field if 'set_input_errored' is set to True. If widget_class is set, then this class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput4.input_text": "The name of the input text field, with default value.",
  "widgets.inputtext.TextInput4.input_text.full": "The name of the input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.TextInput4.inputdiv_class": "The css class of the div containing the input field.",
  "widgets.inputtext.TextInput4.label": "The text displayed to the left of the input text field.",
  "widgets.inputtext.TextInput4.label.full": "The text displayed to the left of the input text field within a 'label' tag. If no text is given no label tag is created. The label tag is given a 'for' attribute with the id of the input text field.",
  "widgets.inputtext.TextInput4.label_class": "A CSS class for the label.",
  "widgets.inputtext.TextInput4.label_class.full": "A CSS class for the label",
  "widgets.inputtext.TextInput4.labeldiv_class": "The css class of the div containing the label.",
  "widgets.inputtext.TextInput4.maxlength": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput4.maxlength.full": "The maximum number of characters accepted in the text input field.",
  "widgets.inputtext.TextInput4.pattern": "Attribute specifies a regular expression the value is checked against.",
  "widgets.inputtext.TextInput4.redstar": "If True a red asterix is shown by the side of the input field.",
  "widgets.inputtext.TextInput4.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput4.required.full": "Set True to put the 'required' attribute into the input field.",
  "widgets.inputtext.TextInput4.set_input_accepted": "Enable the input_accepted class.",
  "widgets.inputtext.TextInput4.set_input_accepted.full": "If set to True the input_accepted_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput4.set_input_errored": "Enable the input_errored class.",
  "widgets.inputtext.TextInput4.set_input_errored.full": "If set to True the input_errored_class will be added to the class list of the input field.",
  "widgets.inputtext.TextInput4.size": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput4.size.full": "The number of characters appearing in the text input field.",
  "widgets.inputtext.TextInput4.title": "Shown if the pattern fails.",
  "widgets.inputtext.TextInput4.type": "The type set on the input field, such as text or email.",
  "widgets.inputtext.TwoInputsSubmit1": "A form with two text input fields, a submit button and four hidden fields.",
  "widgets.inputtext.TwoInputsSubmit1.action": "The form destination, if action_json not set - either a responder page ident or label.",
  "widgets.inputtext.TwoInputsSubmit1.action.full": "This field sets the 'action' attribute of the form tag. Either a responder page ident, or page label (if the target responder page has been given a label) should be input here, and at run time this will be converted to the correct URL.  Normally you would set the action to call a responder page - or the first in a series of responders, that check the correct fields have been submitted, validates them, stores the results in the call_data dictionary, then submits the data to your code.",
  "widgets.inputtext.TwoInputsSubmit1.action_json": "The form destination - either a responder page ident or label, requires JSON page returned.",
  "widgets.inputtext.TwoInputsSubmit1.button_class": "The class of the submit button.",
  "widgets.inputtext.TwoInputsSubmit1.button_class.full": "The class of the submit button. This gives the opportunity to define a button via CSS.",
  "widgets.inputtext.TwoInputsSubmit1.button_text": "The text on the button.",
  "widgets.inputtext.TwoInputsSubmit1.button_text.full": "The text on the button.",
  "widgets.inputtext.TwoInputsSubmit1.disabled1": "If True, the first input field will be disabled.",
  "widgets.inputtext.TwoInputsSubmit1.disabled2": "If True, the second input field will be disabled.",
  "widgets.inputtext.TwoInputsSubmit1.error_class": "The class applied to the div containing the error message on error.",
  "widgets.inputtext.TwoInputsSubmit1.error_class.full": "The class applied to the normally hidden div containing the paragraph and error message. On error this div is displayed.",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field1": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field1.full": "A hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field2": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field2.full": "A second hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field3": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field3.full": "A third hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field4": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.hidden_field4.full": "A fourth hidden field value, leave blank if unused, this field name is used as the submitted field name",
  "widgets.inputtext.TwoInputsSubmit1.input_accepted_class": "Class to be set on an input field if set_input_accepted1 or 2 is True.",
  "widgets.inputtext.TwoInputsSubmit1.input_accepted_class.full": "Class to be set on an input field if the appropriate set_input_accepted1 or 2 is True. Typically used to show an input has been submitted and accepted ok, such as a green border.",
  "widgets.inputtext.TwoInputsSubmit1.input_class1": "CSS Class set on the first input field.",
  "widgets.inputtext.TwoInputsSubmit1.input_class2": "CSS Class set on the second input field.",
  "widgets.inputtext.TwoInputsSubmit1.input_errored_class": "Class to be set on an input field if set_errored_accepted1 or 2 is True.",
  "widgets.inputtext.TwoInputsSubmit1.input_errored_class.full": "Class to be set on an input field if the appropriate set_errored_accepted1 or 2 is True. Typically used to show that a submitted value is in error, such as a red border.",
  "widgets.inputtext.TwoInputsSubmit1.input_text1": "The name of the first input text field, with default value.",
  "widgets.inputtext.TwoInputsSubmit1.input_text1.full": "The name of the first input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.TwoInputsSubmit1.input_text2": "The name of the second input text field, with default value.",
  "widgets.inputtext.TwoInputsSubmit1.input_text2.full": "The name of the second input text field, set the value of this field to the default value shown in the field, the user will change this value which will then be returned. Validators can be added to this field.",
  "widgets.inputtext.TwoInputsSubmit1.inputdiv_class": "The class of the div containing label, input text fields and submit button.",
  "widgets.inputtext.TwoInputsSubmit1.label": "The text displayed to the left of the first input text field.",
  "widgets.inputtext.TwoInputsSubmit1.label.full": "The text displayed to the left of the first input text field within a 'label' tag. If no text is given no label tag is created.",
  "widgets.inputtext.TwoInputsSubmit1.label_class": "The css class of the label to the left of the first input text field.",
  "widgets.inputtext.TwoInputsSubmit1.label_class.full": "The css class of the label tag to the left of the first input text field.",
  "widgets.inputtext.TwoInputsSubmit1.maxlength1": "The maximum number of characters accepted in the first text input field.",
  "widgets.inputtext.TwoInputsSubmit1.maxlength1.full": "The maximum number of characters accepted in the first text input field.",
  "widgets.inputtext.TwoInputsSubmit1.maxlength2": "The maximum number of characters accepted in the second text input field.",
  "widgets.inputtext.TwoInputsSubmit1.maxlength2.full": "The maximum number of characters accepted in the second text input field.",
  "widgets.inputtext.TwoInputsSubmit1.pattern1": "If the browser supports this feature, a regular expression pattern will be tested against the first input field.",
  "widgets.inputtext.TwoInputsSubmit1.pattern2": "If the browser supports this feature, a regular expression pattern will be tested against the second input field.",
  "widgets.inputtext.TwoInputsSubmit1.required1": "Set True to put the 'required' attribute into the first input field.",
  "widgets.inputtext.TwoInputsSubmit1.required1.full": "Set True to put the 'required' attribute into the first input field.",
  "widgets.inputtext.TwoInputsSubmit1.required2": "Set True to put the 'required' attribute into the second input field.",
  "widgets.inputtext.TwoInputsSubmit1.required2.full": "Set True to put the 'required' attribute into the second input field.",
  "widgets.inputtext.TwoInputsSubmit1.set_input_accepted1": "If True, input_accepted_class will be set on the first input field.",
  "widgets.inputtext.TwoInputsSubmit1.set_input_accepted2": "If True, input_accepted_class will be set on the second input field.",
  "widgets.inputtext.TwoInputsSubmit1.set_input_errored1": "If True, input_errored_class will be set on the first input field.",
  "widgets.inputtext.TwoInputsSubmit1.set_input_errored2": "If True, input_errored_class will be set on the second input field.",
  "widgets.inputtext.TwoInputsSubmit1.size1": "The number of characters appearing in the first text input field.",
  "widgets.inputtext.TwoInputsSubmit1.size1.full": "The number of characters appearing in the first text input field.",
  "widgets.inputtext.TwoInputsSubmit1.size2": "The number of characters appearing in the second text input field.",
  "widgets.inputtext.TwoInputsSubmit1.size2.full": "The number of characters appearing in the second text input field.",
  "widgets.inputtext.TwoInputsSubmit1.title1": "Text shown if the pattern regular expression does not match in the first text input field.",
  "widgets.inputtext.TwoInputsSubmit1.title2": "Text shown if the pattern regular expression does not match in the second text input field.",
  "widgets.inputtext.TwoInputsSubmit1.type1": "The type set on the first input field, such as text or email.",
  "widgets.inputtext.TwoInputsSubmit1.type2": "The type set on the second input field, such as text or email.",
  "widgets.inputtext.module": "Contains widgets for inputting text.",
  "widgets.links.ButtonLink1": "A button link to the page with the given ident, label or url, and two optional get fields.",
  "widgets.links.ButtonLink1.button_text": "The text to be displayed within the button.",
  "widgets.links.ButtonLink1.button_text.full": "The text to be displayed within the button. If none given, the target page url will be used.",
  "widgets.links.ButtonLink1.error_class": "CSS class which replaces widget_class on error.",
  "widgets.links.ButtonLink1.error_class.full": "The CSS class which replaces widget_class on error. The CSS definition should also include hover and visited states to get a full button effect.",
  "widgets.links.ButtonLink1.force_ident": "If True then the page ident and data will always be included in the request.",
  "widgets.links.ButtonLink1.force_ident.full": "Normally when a widget submits data, the page ident, and ident_data is automatically submitted as well.  However if no 'get' field values are given to this widget, then no data is submitted. Setting this field to True causes page ident and ident_data to always be submitted even if no get field is used.",
  "widgets.links.ButtonLink1.get_field1": "Optional 'get' string set in the target url.",
  "widgets.links.ButtonLink1.get_field1.full": "Optional 'get' string set in the target url.",
  "widgets.links.ButtonLink1.get_field2": "Optional second 'get' string set in the target url.",
  "widgets.links.ButtonLink1.get_field2.full": "Optional second 'get' string set in the target url.",
  "widgets.links.ButtonLink1.hide": "Normally False, if True, and no error, the button will be hidden. JSON settable.",
  "widgets.links.ButtonLink1.hide.full": "Normally False, if True, and no error, the button will be hidden. The widget will still exist on the page, so the widget can be hidden or displayed by a JSON call.",
  "widgets.links.ButtonLink1.link_ident": "The url, ident or label this button links to.",
  "widgets.links.ButtonLink1.link_ident.full": "The url, ident or label this button links to.",
  "widgets.links.ButtonLink1.target": "If given, the target attribute will be set.",
  "widgets.links.ButtonLink1.widget_class": "The CSS class applied to the widget, which should display a button.",
  "widgets.links.ButtonLink1.widget_class.full": "The CSS class applied to the widget, which should display a button. The CSS definition should also include hover and visited states to get a full button effect. If this widget is set to display an error, then this class is replaced by the class defined in field error_class.",
  "widgets.links.ButtonLink2": "A div containing a button link to the page with the given ident, label or url, and two optional get fields.",
  "widgets.links.ButtonLink2.button_class": "The CSS class applied to the button.",
  "widgets.links.ButtonLink2.button_text": "The text to be displayed within the button.",
  "widgets.links.ButtonLink2.button_text.full": "The text to be displayed within the button. If none given, the target page url will be used.",
  "widgets.links.ButtonLink2.button_wait_text": "A 'please wait' message shown on the button when a call is made.",
  "widgets.links.ButtonLink2.buttondiv_class": "The CSS class applied to the div containing the button.",
  "widgets.links.ButtonLink2.buttondiv_style": "The CSS style applied to the div containing the button.",
  "widgets.links.ButtonLink2.error_class": "CSS class given to a normally hidden error div.",
  "widgets.links.ButtonLink2.get_field1": "Optional 'get' string set in the target url.",
  "widgets.links.ButtonLink2.get_field2": "Optional second 'get' string set in the target url.",
  "widgets.links.ButtonLink2.hide": "Normally False, if True, and no error, the div and button will be hidden. JSON settable.",
  "widgets.links.ButtonLink2.json_ident": "If given, the url, ident or label to link, expecting a json file to be returned.",
  "widgets.links.ButtonLink2.link_ident": "The url, ident or label this button links to, if json_ident is not given, or the client does not have javascript enabled. Expects an HTML page to be returned.",
  "widgets.links.ButtonLink2.widget_class": "The CSS class applied to the widget div.",
  "widgets.links.CSSLink": "Defines a link to a CSS stylesheet.",
  "widgets.links.CSSLink.css_ident": "A url, label or page ident which leads to a CSS file returned.",
  "widgets.links.CSSLink.media": "If given, this string will be set as a media attribute.",
  "widgets.links.CloseButton": "A link button that closes a given section/widget, or if javascript is disabled, calls a link.",
  "widgets.links.CloseButton.get_field1": "Optional 'get' string set in the target url, only called if the client has javascript disabled.",
  "widgets.links.CloseButton.get_field2": "Optional second 'get' string set in the target url, only called if the client has javascript disabled.",
  "widgets.links.CloseButton.link_ident": "The link to an html page taken if the client does not have javascript.",
  "widgets.links.CloseButton.target_section": "If given, this is the target section to hide. This is the target alias name.",
  "widgets.links.CloseButton.target_widget": "If given, this is the widget to hide.",
  "widgets.links.FaviconLink": "Defines a link to a png favicon.",
  "widgets.links.FaviconLink.favicon_ident": "The target ident or label which returns the png icon.",
  "widgets.links.GeneralButtonTable2": "A JSON enabled table of mixed text, and link buttons, with drag and drop operation on rows supported.",
  "widgets.links.GeneralButtonTable2.button_class": "The CSS class to apply to the button links",
  "widgets.links.GeneralButtonTable2.cols": "A list of two element lists for every column in the table",
  "widgets.links.GeneralButtonTable2.cols.full": "A list of two element lists for every column in the table:\r\n0 The target HTML ident or label of buttons in the column, if the second element of this list is empty string or the client has javascript disabled.\r\n1 The target JSON ident or label of buttons in the column.",
  "widgets.links.GeneralButtonTable2.contents": "A list of lists for every element in the table. This fieldname used as the widgfield for the get data.",
  "widgets.links.GeneralButtonTable2.contents.full": "A list of lists should be provided. Each inner list should have four elements:\r\n\r\n0 Provide a text string, either text to display or button text. Note: This will not be HTML escaped, so raw html could go here.\r\n1 Set a CSS style on the td tag if required.\r\n2 If False only text will be shown, not a button. If True a link and the button class will be applied.\r\n3 The get field value of the link button.\r\n\r\nThis widgfield name will be used as the widgfield of the submitted get field. The url called is set by the cols field.",
  "widgets.links.GeneralButtonTable2.dragrows": "A list of two element lists for every row in the table, defines which rows are drag enabled. Could be empty if no drag operation is allowed on the table.",
  "widgets.links.GeneralButtonTable2.dragrows.full": "A list of two element lists for every row in the table, defines which rows are drag enabled. Could be empty if no drag operation is allowed on the table.\r\nEach inner list has contents:\r\n0 - True if the row is draggable, False if not.\r\n1 - If index 0 is True, this is data sent with the call when a row is dropped.",
  "widgets.links.GeneralButtonTable2.dropident": "If given, is the ident or label of a target which should return a JSON page. This is called when a drop occurs on a drop enabled row.",
  "widgets.links.GeneralButtonTable2.droprows": "A list of two element lists for every row in the table, defines which rows are drop enabled. Could be empty if no drop operation is allowed on the table.",
  "widgets.links.GeneralButtonTable2.droprows.full": "A list of two element lists for every row in the table, defines which rows are drop enabled. Could be empty if no drop operation is allowed on the table.\r\nEach inner list has contents:\r\n0 - True if the row allows dropping on it, False if not.\r\n1 - If index 0 is True, this is data sent with the call when an item is dropped on the row.",
  "widgets.links.GeneralButtonTable2.even_class": "The CSS class of even rows, if empty string, then no class will be applied.",
  "widgets.links.GeneralButtonTable2.hide": "If True, the table will be hidden, can be set by JSON.",
  "widgets.links.GeneralButtonTable2.odd_class": "The CSS class of odd rows, if empty string, then no class will be applied.",
  "widgets.links.ImageLink1": "An image, acting as a link.",
  "widgets.links.ImageLink1.align": "Sets the align attribute of the img tag.",
  "widgets.links.ImageLink1.force_ident": "Normally the page ident is sent as an hidden field only if a link submits data. Setting this True, forces the page ident to be sent even if no get fields are set.",
  "widgets.links.ImageLink1.get_field1": "Optional 'get' string set in the target url.",
  "widgets.links.ImageLink1.get_field2": "Optional second 'get' string set in the target url.",
  "widgets.links.ImageLink1.get_field3": "Optional third 'get' string set in the target url.",
  "widgets.links.ImageLink1.height": "The height attribute of the image.",
  "widgets.links.ImageLink1.hover_img_ident": "The ident or label of an image page which returns an image displayed when the mouse hovers over the link.",
  "widgets.links.ImageLink1.img_ident": "The ident or label of the image page which returns an image.",
  "widgets.links.ImageLink1.link_ident": "The target page ident or label.",
  "widgets.links.ImageLink1.target": "If given, the target attribute will be set.",
  "widgets.links.ImageLink1.width": "The width attribute of the image.",
  "widgets.links.ImageOrTextLink": "Link with displayed contents as either an image page given by img_link or the text given by link_text.",
  "widgets.links.ImageOrTextLink.force_ident": "If True then the page ident and data will always be included in the call.",
  "widgets.links.ImageOrTextLink.force_ident.full": "Normally when a widget submits data, the page ident, and ident_data is automatically submitted as well.  However if no 'get' field values are given to this widget, then no data is submitted. Setting this field to True causes page ident and ident_data to always be submitted even if no get field is used.",
  "widgets.links.ImageOrTextLink.get_field1": "Optional 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field1.full": "Optional 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field2": "Optional second 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field2.full": "Optional second 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field3": "Optional third 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field3.full": "Optional third 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field4": "Optional fourth 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.get_field4.full": "Optional fourth 'get' string set in the target url.",
  "widgets.links.ImageOrTextLink.height": "Image height.",
  "widgets.links.ImageOrTextLink.height.full": "The height of the image, ignored if text is to be displayed.",
  "widgets.links.ImageOrTextLink.img_link": "The url, ident or label of the image.",
  "widgets.links.ImageOrTextLink.img_link.full": "The url, ident or label of the image.",
  "widgets.links.ImageOrTextLink.link_ident": "The url, ident or label this link targets.",
  "widgets.links.ImageOrTextLink.link_ident.full": "The url, ident or label this link targets.",
  "widgets.links.ImageOrTextLink.link_text": "If given, this text will be used instead of an image.",
  "widgets.links.ImageOrTextLink.link_text.full": "If given, this text will be used instead of an image.",
  "widgets.links.ImageOrTextLink.target": "If given, the target attribute will be set.",
  "widgets.links.ImageOrTextLink.width": "The image width.",
  "widgets.links.ImageOrTextLink.width.full": "The width of the image, ignored if text is to be displayed.",
  "widgets.links.JSONButtonLink": "A button link with two optional get fields that can be set via JSON.",
  "widgets.links.JSONButtonLink.button_text": "The text to be displayed within the button.",
  "widgets.links.JSONButtonLink.button_text.full": "The text to be displayed within the button. If none given, the target page url will be used.",
  "widgets.links.JSONButtonLink.button_wait_text": "The text to be displayed within the button as the call is made.",
  "widgets.links.JSONButtonLink.error_class": "CSS class which replaces widget_class on error.",
  "widgets.links.JSONButtonLink.error_class.full": "The CSS class which replaces widget_class on error. The CSS definition should also include hover and visited states to get a full button effect.",
  "widgets.links.JSONButtonLink.get_field1": "Optional 'get' string set in the target url, JSON settable.",
  "widgets.links.JSONButtonLink.get_field1.full": "Optional 'get' string set in the target url. Can be set via a JSON call.",
  "widgets.links.JSONButtonLink.get_field2": "Optional second 'get' string set in the target url, JSON settable.",
  "widgets.links.JSONButtonLink.get_field2.full": "Optional second 'get' string set in the target url. Can be set via a JSON call.",
  "widgets.links.JSONButtonLink.hide": "Normally False, if True, and no error, the button will be hidden. JSON settable.",
  "widgets.links.JSONButtonLink.hide.full": "Normally False, if True, and no error, the button will be hidden. The widget will still exist on the page, so the widget can be hidden or displayed by a JSON call.",
  "widgets.links.JSONButtonLink.json_ident": "The url, ident or label this button links to requesting a JSON file returned.",
  "widgets.links.JSONButtonLink.json_ident.full": "The url, ident or label this button links to. Called if the client has Javascript enabled. The link should return a JSON file.",
  "widgets.links.JSONButtonLink.link_ident": "The url, ident or label this button links to if no Javascript.",
  "widgets.links.JSONButtonLink.link_ident.full": "The url, ident or label this button links to. Only called if lson_ident is not set, or if the client has Javascript disabled.",
  "widgets.links.JSONButtonLink.widget_class": "The CSS class applied to the widget.",
  "widgets.links.Link": "A link to the page with the given ident, label or url, and two optional get fields.",
  "widgets.links.Link.content": "The text shown in the link, automatically set to the URL if no text is given.",
  "widgets.links.Link.content.full": "The text shown in the link, automatically set to the URL if no text is given.",
  "widgets.links.Link.force_ident": "If set to True, then ident data will be sent with the link, even if no get field is set.",
  "widgets.links.Link.force_ident.full": "Whenever data is submitted in a get field, a further hidden field is also submitted giving the calling page ident with the ident_data string given by the end_call function.\r\nHowever if no get field has been set with data, this is a link that does not submit data and no ident data is submitted. If you wish to still send ident data in this situation, set the value here to True.",
  "widgets.links.Link.get_field1": "The first get field of the link.",
  "widgets.links.Link.get_field1.full": "This field value is submitted as get data with the link. The field name becomes part of the widgfield submitted.",
  "widgets.links.Link.get_field2": "The second get field of the link.",
  "widgets.links.Link.get_field2.full": "This field value is submitted as get data with the link. The field name becomes part of the widgfield submitted.",
  "widgets.links.Link.link_ident": "The target of the link, being either a page ident, label or URL.",
  "widgets.links.Link.link_ident.full": "The target of the link, can be set with a page ident, label or a URL.",
  "widgets.links.Link.target": "If given, the target attribute will be set.",
  "widgets.links.LinkTextBlockTable1": "A table of two columns, first column being links and the second a column of TextBlocks.",
  "widgets.links.LinkTextBlockTable1.col1_link_title": "The title of the first column, above the links.",
  "widgets.links.LinkTextBlockTable1.col2_text_title": "The title of the second colum, above the textblocks.",
  "widgets.links.LinkTextBlockTable1.even_class": "The CSS class of even rows, if empty string, then no class will be applied.",
  "widgets.links.LinkTextBlockTable1.force_ident": "If True, the page ident will be sent with the link, even if no get fields are present.",
  "widgets.links.LinkTextBlockTable1.header_class": "The CSS class of the header title row, if empty string, then no class will be applied.",
  "widgets.links.LinkTextBlockTable1.link_ident": "The target page link ident, url or label.",
  "widgets.links.LinkTextBlockTable1.link_table": "A list of lists, one inner list for each row.",
  "widgets.links.LinkTextBlockTable1.link_table.full": "A list of lists, one inner list for each row. The inner list elements being:\r\n0 is the visible text to place in the link,\r\n1 is the first get field of the link\r\n2 is the second get field of the link\r\n3 is the reference string of a textblock to appear in the column adjacent to the link\r\n4 is text to appear if the reference cannot be found\r\n5 normally empty string, if set to text it will replace the textblock",
  "widgets.links.LinkTextBlockTable1.odd_class": "The CSS class of odd rows, if empty string, then no class will be applied.",
  "widgets.links.LinkTextBlockTable1.show_get_field1": "If True, enables the first get field, the name of this variable is used as the field name.",
  "widgets.links.LinkTextBlockTable1.show_get_field2": "If True, enables the second get field, the name of this variable is used as the field name.",
  "widgets.links.LinkTextBlockTable2": "A three column table, column 1 links, column 2 text, column 3 TextBlocks.",
  "widgets.links.LinkTextBlockTable2.col_link_title": "The title of the first column, above the links.",
  "widgets.links.LinkTextBlockTable2.col_text_title": "The title of the second column, above the text strings.",
  "widgets.links.LinkTextBlockTable2.col_textblock_title": "The title of the third column, above the text strings.",
  "widgets.links.LinkTextBlockTable2.even_class": "The CSS class of even rows, if empty string, then no class will be applied.",
  "widgets.links.LinkTextBlockTable2.force_ident": "If True, the page ident will be sent with the link, even if no get fields are present.",
  "widgets.links.LinkTextBlockTable2.header_class": "The CSS class of the header title row, if empty string, then no class will be applied.",
  "widgets.links.LinkTextBlockTable2.link_ident": "The target page link ident, url or label.",
  "widgets.links.LinkTextBlockTable2.link_table": "A list of lists, one inner list for each row.",
  "widgets.links.LinkTextBlockTable2.link_table.full": "A list of lists, one inner list for each row. The inner list elements being:\r\n0 is the visible text to place in the link,\r\n1 is the first get field of the link\r\n2 is the second get field of the link\r\n3 is the text to appear in the second table column\r\n4 is the reference string of a textblock to appear in the third table column\r\n5 is text to appear if the reference cannot be found\r\n6 normally empty string, if set to text it will replace the textblock",
  "widgets.links.LinkTextBlockTable2.odd_class": "The CSS class of odd rows, if empty string, then no class will be applied.",
  "widgets.links.LinkTextBlockTable2.show_get_field1": "If True, enables the first get field, the name of this variable is used as the field name.",
  "widgets.links.LinkTextBlockTable2.show_get_field2": "If True, enables the second get field, the name of this variable is used as the field name.",
  "widgets.links.ListLinks": "A list of links, each with one get field.",
  "widgets.links.ListLinks.force_ident": "If True then the page ident will be included, even if no get field set.\r\nIf False, the page ident will only be included if a get field is set.",
  "widgets.links.ListLinks.li_class": "The CSS class to set in each li element.",
  "widgets.links.ListLinks.link_class": "The CSS class to set in each a element.",
  "widgets.links.ListLinks.links": "A list of lists, each inner list defining a link. The name of this field is used as the widgfield of the get data returned.",
  "widgets.links.ListLinks.links.full": "A list of lists, each inner list defining a link. The name of this field is used as the widgfield of the get data returned.\r\nEach inner list has elements:\r\n0 is the text to place in link.\r\n1 is the link ident, label or url.\r\n2 is the get field contents of the link, empty if not used.",
  "widgets.links.ListLinks.target": "If given, the target attribute will be set on each link.",
  "widgets.links.OpenButton": "A link button that opens a given section/widget, or if javascript is disabled, calls a link.",
  "widgets.links.OpenButton.get_field1": "Optional 'get' string set in the target url, only used if the client has javascript disabled.",
  "widgets.links.OpenButton.get_field2": "Optional second 'get' string set in the target url, only used if the client has javascript disabled.",
  "widgets.links.OpenButton.link_ident": "The ident, label or URL of the target link called if the client does not have javascript enabled.",
  "widgets.links.OpenButton.target_section": "An optional section name, which if hidden, will be displayed when the button is pressed.",
  "widgets.links.OpenButton.target_widget": "An optional widget name, which if hidden, will be displayed when the button is pressed.",
  "widgets.links.ProjectiFrame": "An iframe displaying a given sub project.",
  "widgets.links.ProjectiFrame.height": "The iframe height in pixels.",
  "widgets.links.ProjectiFrame.sub_project": "The sub project name to be shown. The src attribute will be set automatically.",
  "widgets.links.ProjectiFrame.sub_project.full": "The sub project to be shown. The iframe will have a name attribute with this sub project name or sectionalias-subprojectname if the iframe is in a section",
  "widgets.links.ProjectiFrame.width": "The iframe width in pixels.",
  "widgets.links.ScriptLink": "A script link to a javascript file.",
  "widgets.links.ScriptLink.script_ident": "The label, ident or url which returns a javascript file.",
  "widgets.links.Table1_Button": "A table of a single text column, followed by a button link column.",
  "widgets.links.Table1_Button.button_class": "The CSS class to apply to the buttons.",
  "widgets.links.Table1_Button.button_text": "Text on the link button.",
  "widgets.links.Table1_Button.contents": "List of lists - [[text, getfield],..]",
  "widgets.links.Table1_Button.even_class": "CSS class of even rows, if empty no class will be applied.",
  "widgets.links.Table1_Button.header_class": "CSS class of the table header row.",
  "widgets.links.Table1_Button.hide": "If True, the table will be hidden.",
  "widgets.links.Table1_Button.json_ident": "The url, ident or label for the buttons, requires a json file to be returned.",
  "widgets.links.Table1_Button.link_ident": "HTML link used if json_ident not given, or if javascript not available.",
  "widgets.links.Table1_Button.maximize_text_col": "If True the text column width is large, and button columns small.",
  "widgets.links.Table1_Button.odd_class": "CSS class of odd rows, if empty no class will be applied.",
  "widgets.links.Table1_Button.title1": "The header title over the text column.",
  "widgets.links.Table1_Buttons4": "A table of a single text column, followed by up to four button link columns",
  "widgets.links.Table1_Buttons4.btn_col1": "True if first button column exists",
  "widgets.links.Table1_Buttons4.btn_col1.full": "True, if first button column exists, False if not. This field name is used as the get field name of the link if get data is to be sent.",
  "widgets.links.Table1_Buttons4.btn_col2": "True if second button column exists",
  "widgets.links.Table1_Buttons4.btn_col2.full": "True, if second button column exists, False if not. This field name is used as the get field name of the link if get data is to be sent.",
  "widgets.links.Table1_Buttons4.btn_col3": "True if third button column exists",
  "widgets.links.Table1_Buttons4.btn_col3.full": "True, if third button column exists, False if not. This field name is used as the get field name of the link if get data is to be sent.",
  "widgets.links.Table1_Buttons4.btn_col4": "True if fourth button column exists",
  "widgets.links.Table1_Buttons4.btn_col4.full": "True, if fourth button column exists, False if not. This field name is used as the get field name of the link if get data is to be sent.",
  "widgets.links.Table1_Buttons4.button_class": "The CSS class to apply to all the buttons",
  "widgets.links.Table1_Buttons4.button_text1": "The text on each of the first column buttons",
  "widgets.links.Table1_Buttons4.button_text2": "The text on each of the second column buttons",
  "widgets.links.Table1_Buttons4.button_text3": "The text on each of the third column buttons",
  "widgets.links.Table1_Buttons4.button_text4": "The text on each of the fourth column buttons",
  "widgets.links.Table1_Buttons4.col0_classes": "List of CSS classes to apply to td elements of the text column",
  "widgets.links.Table1_Buttons4.col0_classes.full": "List of CSS classes to apply to td elements of the text column. The first class in the list will be applied to the first row text td element, the second class to the second row etc., If no list given, no classes will be applied.",
  "widgets.links.Table1_Buttons4.contents": "List of lists, each inner list of nine parameters",
  "widgets.links.Table1_Buttons4.contents.full": "List of lists, each inner list applies to a row and has elements : 0 is the text to place in the first column; 1, 2, 3, 4 are the get field contents of the four button links, empty strings if not used; 5, 6, 7, 8 are boolean True or False, True if the appropriate button is to be shown, False if not.",
  "widgets.links.Table1_Buttons4.even_class": "If given, the CSS class applied to even rows.",
  "widgets.links.Table1_Buttons4.link_ident1": "The target of the first column buttons",
  "widgets.links.Table1_Buttons4.link_ident2": "The target of the second column buttons",
  "widgets.links.Table1_Buttons4.link_ident3": "The target of the third column buttons",
  "widgets.links.Table1_Buttons4.link_ident4": "The target of the fourth column buttons",
  "widgets.links.Table1_Buttons4.maximize_text_col": "If True the text column width is maximised and button columns minimised",
  "widgets.links.Table1_Buttons4.odd_class": "If given, the CSS class applied to odd rows.",
  "widgets.links.Table2_Button": "A table of two text and one button link columns.",
  "widgets.links.Table2_Button.button_class": "The CSS class to apply to the buttons.",
  "widgets.links.Table2_Button.button_text": "Text on the link button.",
  "widgets.links.Table2_Button.contents": "List of lists - [[text, text, getfield],..]",
  "widgets.links.Table2_Button.even_class": "CSS class of even rows, if empty no class will be applied.",
  "widgets.links.Table2_Button.header_class": "CSS class of the table header row.",
  "widgets.links.Table2_Button.hide": "If True, the table will be hidden.",
  "widgets.links.Table2_Button.json_ident": "The url, ident or label for the buttons, requires a json file to be returned.",
  "widgets.links.Table2_Button.link_ident": "HTML link used if json_ident not given, or if javascript not available.",
  "widgets.links.Table2_Button.odd_class": "CSS class of odd rows, if empty no class will be applied.",
  "widgets.links.Table2_Button.title1": "The header title over the first text column.",
  "widgets.links.Table2_Button.title2": "The header title over the second text column.",
  "widgets.links.Table3_Buttons2": "A table of three text columns and two button link columns.",
  "widgets.links.Table3_Buttons2.button_class": "The CSS class to apply to the buttons.",
  "widgets.links.Table3_Buttons2.button_text1": "Text on the first link button column.",
  "widgets.links.Table3_Buttons2.button_text2": "Text on the second link button column.",
  "widgets.links.Table3_Buttons2.button_wait_text1": "Text shown on button1 when pressed",
  "widgets.links.Table3_Buttons2.button_wait_text2": "Text shown on button2 when pressed",
  "widgets.links.Table3_Buttons2.contents": "List of lists - each inner list describing a row.",
  "widgets.links.Table3_Buttons2.contents.full": "List of lists - each inner list describing a row.\nIndex 0, 1 and 2 is the text to place in the first three columns,\nIndex 3, 4 is the two get field contents of the first link,\nIndex 5, 6 is the two get field contents of the second link.\nIndex 7 - True if the first button and link is to be shown, False if not.\nIndex 8 - True if the second button and link is to be shown, False if not",
  "widgets.links.Table3_Buttons2.even_class": "CSS class of even rows, if empty no class will be applied.",
  "widgets.links.Table3_Buttons2.get_field1_1": "The field name is the name (not value) of the get field 1 of the first link, value is True if get field exists, False if not",
  "widgets.links.Table3_Buttons2.get_field1_2": "The field name is the name (not value) of the get field 2 of the first link, value is True if get field exists, False if not",
  "widgets.links.Table3_Buttons2.get_field2_1": "The field name is the name (not value) of the get field 1 of the second link, value is True if get field exists, False if not",
  "widgets.links.Table3_Buttons2.get_field2_2": "The field name is the name (not value) of the get field 2 of the second link, value is True if get field exists, False if not",
  "widgets.links.Table3_Buttons2.header_class": "CSS class of the table header row.",
  "widgets.links.Table3_Buttons2.json_ident1": "The url, ident or label for the first column of buttons, requires a json file to be returned.",
  "widgets.links.Table3_Buttons2.json_ident2": "The url, ident or label for the second column of buttons, requires a json file to be returned.",
  "widgets.links.Table3_Buttons2.link_ident1": "HTML link used for the first column of buttons, if json_ident not given, or if javascript not available.",
  "widgets.links.Table3_Buttons2.link_ident2": "HTML link used for the second column of buttons, if json_ident not given, or if javascript not available.",
  "widgets.links.Table3_Buttons2.odd_class": "CSS class of odd rows, if empty no class will be applied.",
  "widgets.links.Table3_Buttons2.title1": "The header title over the first text column.",
  "widgets.links.Table3_Buttons2.title2": "The header title over the second text column.",
  "widgets.links.Table3_Buttons2.title3": "The header title over the third text column.",
  "widgets.links.module": "Links, including links to page idents, and tables of links with get fields and link text.",
  "widgets.lists.UList1": "A UL list with JSON settable text content.",
  "widgets.lists.UList1.contents": "List of text strings, each being a li element content.",
  "widgets.lists.UList1.contents.full": "List of text strings, each being a li element content. Can be set by JSON, any text content is escaped, but new lines are converted to br tags.",
  "widgets.lists.UList1.even_class": "CSS class applied to each even li element.",
  "widgets.lists.UList1.odd_class": "CSS class applied to each odd li element.",
  "widgets.lists.module": "Lists, including unordered and ordered lists with JSON settable content.",
  "widgets.logins.Pin4": "Defines a form containing four single character input fields.",
  "widgets.logins.Pin4.action": "The target ident or label called when the form is submitted.",
  "widgets.logins.Pin4.butt_div_class": "The CSS class of the div containing the submit button and label.",
  "widgets.logins.Pin4.button_class": "The CSS class of the submit input field.",
  "widgets.logins.Pin4.button_text": "The text on the submit button.",
  "widgets.logins.Pin4.char_div_class": "The CSS class of the div containing the four input PIN fields.",
  "widgets.logins.Pin4.char_div_style": "The CSS style of the div containing the four input PIN fields.",
  "widgets.logins.Pin4.error_class": "The CSS class applied to a normally hidden div appearing above the form. The div contains an error paragraph and is shown when the widget displays an error message.",
  "widgets.logins.Pin4.hidden_field1": "A hidden field value, leave blank if unused,  the field name is used in the submitted widgfield.",
  "widgets.logins.Pin4.hidden_field2": "A second hidden field value, leave blank if unused,  the field name is used in the submitted widgfield.",
  "widgets.logins.Pin4.hidden_field3": "A third hidden field value, leave blank if unused,  the field name is used in the submitted widgfield.",
  "widgets.logins.Pin4.hidden_field4": "A fourth hidden field value, leave blank if unused,  the field name is used in the submitted widgfield.",
  "widgets.logins.Pin4.hide": "If True, the widget is hidden, normally set to False to display the widget, can be set by JSON.",
  "widgets.logins.Pin4.inner_div_class": "CSS Class set on an inner div containing the error message and form, contained within the widget div. May be useful if a modal widget is required.",
  "widgets.logins.Pin4.left_class": "CSS class set on a label to the left of the submit button.",
  "widgets.logins.Pin4.left_label": "Label text set on the left of the submit button.",
  "widgets.logins.Pin4.pin1": "If True, the pin1 field is enabled, if False the field is disabled with an 'X' inserted. The field name is used as the widgfield name for the submitted value.",
  "widgets.logins.Pin4.pin2": "If True, the pin2 field is enabled, if False the field is disabled with an 'X' inserted. The field name is used as the widgfield name for the submitted value.",
  "widgets.logins.Pin4.pin3": "If True, the pin3 field is enabled, if False the field is disabled with an 'X' inserted. The field name is used as the widgfield name for the submitted value.",
  "widgets.logins.Pin4.pin4": "If True, the pin4 field is enabled, if False the field is disabled with an 'X' inserted. The field name is used as the widgfield name for the submitted value.",
  "widgets.logins.Pin4.right_class": "CSS class set on a label to the right of the submit button.",
  "widgets.logins.Pin4.right_label": "Label text set on the right of the submit button.",
  "widgets.logins.module": "Widgets displaying login forms.",
  "widgets.paras.DecodedTextBlock": "A div holding a TextBlock, with its decode option set, so when its contents is displayed the 'get_decoded_text' method of the projects AccessTextBlocks object will be called.",
  "widgets.paras.DecodedTextBlock.hide": "If True the div, and its TextBlock will be hidden, if False will be displayed. JSON settable.",
  "widgets.paras.DecodedTextBlock.text_refnotfound": "The text to be displayed if the TextBlock reference string is not found.",
  "widgets.paras.DecodedTextBlock.textblock_ref": "The TextBlock reference string.",
  "widgets.paras.DivHTML": "A div, containing a string, which will be set as html, without escaping. Hide, drag and drop can be set.",
  "widgets.paras.DivHTML.drag": "If given this is text data sent with a JSON request call when this item is dropped. If nothing set here, this item will not be draggable.",
  "widgets.paras.DivHTML.drop": "If given this is text data sent with a JSON request call when another item is dropped here. If nothing set here, this item will not be droppable.",
  "widgets.paras.DivHTML.dropident": "The ident or label of target which should return a JSON page, called when a drop occurs here.",
  "widgets.paras.DivHTML.set_html": "The string, containing html characters, which will be set within the div. JSON settable.",
  "widgets.paras.DivPara": "A div containing a paragraph, containing text, if an error is raised, then the text is changed for the error message and the error_class given to the paragraph.",
  "widgets.paras.DivPara.error_class": "The CSS class given to the paragraph when an error is displayed. Replaces para_class.",
  "widgets.paras.DivPara.para_class": "The CSS class applied to the paragraph.",
  "widgets.paras.DivPara.para_text": "The text appearing in the paragraph, can be set by JSON. Replaced by the error message when the widget displays an error.",
  "widgets.paras.DivPara.pre_line": "If True, sets style=\"white-space: pre-line;\" into the paragraph which preserves new line breaks in the text.",
  "widgets.paras.DivStyleDiv": "A div, containing an inner div or other tag, which can have a style set, and contains text.",
  "widgets.paras.DivStyleDiv.inner_tag": "The tag, such as div or p applied to the inner element.",
  "widgets.paras.DivStyleDiv.set_text": "The text to set in the inner tag.",
  "widgets.paras.DivStyleDiv.style": "The style of the inner element.",
  "widgets.paras.JSONDivLink": "A div with button and inner div of content. If inner div is visible, it is hidden on link press. If hidden, a call is made.",
  "widgets.paras.JSONDivLink.button_class": "CSS class of the button link.",
  "widgets.paras.JSONDivLink.button_class.full": "CSS class of the button link.",
  "widgets.paras.JSONDivLink.button_hide_text": "Button text when content is visible.",
  "widgets.paras.JSONDivLink.button_hide_text.full": "Button text when content is visible, automatically set on the button by javascript when button pressed to display contents.",
  "widgets.paras.JSONDivLink.button_show_text": "Button text when content is hidden.",
  "widgets.paras.JSONDivLink.button_show_text.": "Button text when content is hidden.",
  "widgets.paras.JSONDivLink.button_show_text.full": "Button text when content is hidden, automatically set on the button by javascript when button pressed to hide contents.",
  "widgets.paras.JSONDivLink.div_class": "CSS class of the content div.",
  "widgets.paras.JSONDivLink.div_class.full": "CSS class of the content div.",
  "widgets.paras.JSONDivLink.div_content": "Text or html string to place in the content div.",
  "widgets.paras.JSONDivLink.div_content.full": "Text or html string to place in the content div. When a call is made to display the contents, this is normally returned (with hide set to False) by JSON to display the text or html.",
  "widgets.paras.JSONDivLink.get_field": "GET data to send when button is pressed.",
  "widgets.paras.JSONDivLink.get_field.full": "GET data to send when button is pressed.",
  "widgets.paras.JSONDivLink.hide": "Set True to hide the contents div, False to show it.",
  "widgets.paras.JSONDivLink.hide.full": "Normally initially set to True on a page to hide the contents div. When a call is made (button pressed to show contents) return hide set to False, and div_content with the text to display. When the button is pressed to toggle to hide again, no call is made as the text is hidden by javascript.",
  "widgets.paras.JSONDivLink.htmlescaped": "If True, any html in the content is escaped.",
  "widgets.paras.JSONDivLink.htmlescaped.full": "If True, any html in the content is escaped.",
  "widgets.paras.JSONDivLink.json_ident": "label or ident of JSON page called to display content.",
  "widgets.paras.JSONDivLink.json_ident.full": "label or ident of JSON page called to display content. Normally a responder which sets hide to False, and div_content to the required text, and passes this to general_json to be returned and displayed.",
  "widgets.paras.JSONDivLink.link_ident": "ident or label of page warning that javascript is needed.",
  "widgets.paras.JSONDivLink.link_ident.full": "As this widget requires javascript, this ident or label should be to a page warning that javascript is needed. Will be called on button press if client browser does not have javascript enabled.",
  "widgets.paras.JSONTextLink": "A div containing an anchor link (used as a button) followed by a paragraph which is hidden when button pressed, or if already hidden, a JSON call is made which can set and display the paragraph.",
  "widgets.paras.JSONTextLink.button_class": "The CSS class set on the anchor tag. Used to describe the button to be pressed.",
  "widgets.paras.JSONTextLink.button_class.full": "The CSS class to be set on the 'a' tag, generally used to describe how the button will look.",
  "widgets.paras.JSONTextLink.button_hide_text": "Text on the button when the paragraph is displayed, such as \"Hide\".",
  "widgets.paras.JSONTextLink.button_show_text": "Text on the button when the paragraph is hidden, such as \"Show\".",
  "widgets.paras.JSONTextLink.get_field": "Data to be sent with the button press - this field name is used in the widgfield.",
  "widgets.paras.JSONTextLink.hide": "If True, hides the paragraph (Note: Not the button). If False, shows it, JSON Enabled.",
  "widgets.paras.JSONTextLink.hide.full": "Normally set to True here, which hides the paragraph (The button link will still be shown). If set to False, displays the paragraph.\r\nGenerally used when the button sends a JSON call, you should return the new text (if any) and also return this hide field with a False value to display the paragraph.",
  "widgets.paras.JSONTextLink.json_ident": "If the text is hidden and the button pressed an call is made to this target ident or label which should return a JSON file.",
  "widgets.paras.JSONTextLink.json_ident.full": "If the text is hidden and the button pressed an call is made to this target ident or label which should return a JSON file.\r\nThe returned file should have {(widgname,'para_text'):'new text to place in paragraph', (widgname,'hide'):False} to display the text and to set the button to 'button_hide_text'.",
  "widgets.paras.JSONTextLink.link_ident": "If the client has javascript disabled, then this target label or ident is called which should return a new html page.",
  "widgets.paras.JSONTextLink.para_class": "The CSS class applied to the paragraph.",
  "widgets.paras.JSONTextLink.para_text": "The text inserted in the paragraph. Can be set by JSON.",
  "widgets.paras.JSONTextLink.pre_line": "If True, sets style=\"white-space: pre-line;\" into the paragraph which preserves new line breaks in the text.",
  "widgets.paras.ParaText": "A p tag, containing text. The text can be set by JSON.",
  "widgets.paras.ParaText.para_text": "The text of the paragraph. Can be set by JSON.",
  "widgets.paras.PreText": "Pre-formatted text placed between pre tags.",
  "widgets.paras.PreText.pre_text": "The text to place between the pre tags.",
  "widgets.paras.ShowPara1": "A div, containing a paragraph of text followed by an error paragraph. The text paragraph is normally visible (depending on the show_para field), the error paragraph is hidden, and becomes visible on error.",
  "widgets.paras.ShowPara1.error_class": "The CSS class of the normally hidden error paragraph.",
  "widgets.paras.ShowPara1.para_class": "The CSS class of the text paragraph.",
  "widgets.paras.ShowPara1.para_text": "Set this with the text to appear in the paragraph.  This can also be set via a JSON file.",
  "widgets.paras.ShowPara1.pre_line": "If True, sets style=\"white-space: pre-line;\" into the paragraph which preserves new line breaks in the text.",
  "widgets.paras.ShowPara1.show_error": "The default error text to be displayed. If this is set into the page_data dictionary it will cause the error paragraph to be displayed. Can be set by JSON file.",
  "widgets.paras.ShowPara1.show_para": "Set to True to display the paragraph, or False to hide it.  This can also be set via a JSON file.",
  "widgets.paras.ShowPara2": "A div, containing an x button which on pressed will hide it, and after the button, another div holding text.",
  "widgets.paras.ShowPara2.close_class": "The CSS class of the div holding the X close symbol.",
  "widgets.paras.ShowPara2.close_style": "The CSS style of the div holding the X close symbol.",
  "widgets.paras.ShowPara2.hide": "If True, hides the widget, JSON settable.",
  "widgets.paras.ShowPara2.inner_class": "CSS class of the inner div holding the text.",
  "widgets.paras.ShowPara2.para_text": "The paragraph text, JSON settable.",
  "widgets.paras.ShowPara2.pre_line": "If True, style \"white-space: pre-line;\" is set on the paragraph, which enables line spacing in the text.",
  "widgets.paras.SpanText": "A span tag, containing text. The text can be set by JSON.",
  "widgets.paras.SpanText.span_text": "The text appearing in the span, can be set by JSON.",
  "widgets.paras.TagBlock": "A general element, containing further content. CSS Class, style, hide, drag and drop can be set.",
  "widgets.paras.TagBlock.container0": "Further elements and widgets can be contained within this tagblock.",
  "widgets.paras.TagBlock.drag": "If given this is text data sent with a JSON request call when this item is dropped. If nothing set here, this item will not be draggable.",
  "widgets.paras.TagBlock.drop": "If given this is text data sent with a JSON request call when another item is dropped here. If nothing set here, this item will not be droppable.",
  "widgets.paras.TagBlock.dropident": "The ident or label of target which should return a JSON page, called when a drop occurs here.",
  "widgets.paras.TagBlock.hide": "If True, the element is hidden, JSON settable.",
  "widgets.paras.TagBlock.tag": "The tag of the element, such as div or p.",
  "widgets.paras.TagText": "A tag, which can be specified, containing text.",
  "widgets.paras.TagText.hide": "If True the widget is hidden, JSON settable.",
  "widgets.paras.TagText.tag": "The tag of the element, such as div or p.",
  "widgets.paras.TagText.tag_text": "The text in the element, JSON settable.",
  "widgets.paras.TextBlockPara": "A paragraph, containing a TextBlock, if an error is raised, then the text is changed for the error_message and the error_class given to the paragraph.",
  "widgets.paras.TextBlockPara.error_class": "CSS class which replaces widget_class when this widget displays an error.",
  "widgets.paras.TextBlockPara.linebreaks": "Set True if linebreaks in the text are to be shown as html breaks.",
  "widgets.paras.TextBlockPara.replace_strings": "A list of strings, if given, will be used with the python % operator on the text.",
  "widgets.paras.TextBlockPara.text_refnotfound": "The text to appear if the textblock is not found.",
  "widgets.paras.TextBlockPara.text_replaceblock": "If given, any text set here will replace the TextBlock text. Can be set by JSON.",
  "widgets.paras.TextBlockPara.textblock_ref": "The reference string of the TextBlock appearing in the paragraph.",
  "widgets.paras.TextBlockParaHider": "A paragraph, containing a TextBlock, if an error is raised, then the text is changed\nfor the error_message and the error_class given to the paragraph. If the user clicks\nthe text, it hides.",
  "widgets.paras.TextBlockParaHider.replace_strings": "A list of strings, which if given, will be used with the python % operator on the text, replacing any '%s' characters set in the TextBlock.",
  "widgets.paras.module": "Paragraphs, including paragraphs showing TextBlocks and error messages.",
  "widgets.radio.BooleanRadio": "A two option radio control for choosing True or False. Without a form or submit button, typically included within a form.",
  "widgets.radio.BooleanRadio.div_class1": "Class of the first div containing the first radio button",
  "widgets.radio.BooleanRadio.div_class1.full": "Class of the first div containing the first radio button",
  "widgets.radio.BooleanRadio.div_class2": "Class of the second div containing the second radio button",
  "widgets.radio.BooleanRadio.div_class2.full": "Class of the second div containing the second radio button",
  "widgets.radio.BooleanRadio.left_class1": "The css class of the label to the left of the first radio button",
  "widgets.radio.BooleanRadio.left_class1.full": "The css class of the label to the left of the first radio button",
  "widgets.radio.BooleanRadio.left_class2": "The css class of the label to the left of the second radio button",
  "widgets.radio.BooleanRadio.left_class2.full": "The css class of the label to the left of the second radio button",
  "widgets.radio.BooleanRadio.left_label1": "The text displayed to the left of the first radio button",
  "widgets.radio.BooleanRadio.left_label1.full": "The text displayed to the left of the first radio button",
  "widgets.radio.BooleanRadio.left_label2": "The text displayed to the left of the second radio button",
  "widgets.radio.BooleanRadio.left_label2.full": "The text displayed to the left of the second radio button",
  "widgets.radio.BooleanRadio.radio_checked": "default value to be checked, True or False, field name is the field returned",
  "widgets.radio.BooleanRadio.radio_checked.full": "default value to be checked, True or False, field name is the field returned",
  "widgets.radio.BooleanRadio.right_class1": "The css class of the label to the right of the first radio button",
  "widgets.radio.BooleanRadio.right_class1.full": "The css class of the label to the right of the first radio button",
  "widgets.radio.BooleanRadio.right_class2": "The css class of the label to the right of the second radio button",
  "widgets.radio.BooleanRadio.right_class2.full": "The css class of the label to the right of the second radio button",
  "widgets.radio.BooleanRadio.right_label1": "The text displayed to the right of the first radio button",
  "widgets.radio.BooleanRadio.right_label1.full": "The text displayed to the right of the first radio button",
  "widgets.radio.BooleanRadio.right_label2": "The text displayed to the right of the second radio button",
  "widgets.radio.BooleanRadio.right_label2.full": "The text displayed to the right of the second radio button",
  "widgets.radio.RadioButton1": "A set of radiobuttons - but without a form or submit button, typically included within a form.",
  "widgets.radio.RadioButton1.div_class": "The CSS class applied to the div containing the radio elements.",
  "widgets.radio.RadioButton1.error_class": "The CSS class applied to the normally hidden error div.",
  "widgets.radio.RadioButton1.inputdiv_class": "The CSS class applied to each radio div.",
  "widgets.radio.RadioButton1.label_class": "The CSS class applied to each label.",
  "widgets.radio.RadioButton1.radio_checked": "The value to appear checked, can be set via JSON.",
  "widgets.radio.RadioButton1.radio_checked.full": "The value which has its associated button checked, and is the value returned when the enclosing form is submitted, unless the user chooses another button. The returned widgfield will consist of this (widget name, field name).\r\n\r\nThis field and value can also be sent via a json file, in which case the checked radio button on the form will be seen to change to this value. ",
  "widgets.radio.RadioButton1.radio_text": "A list of text strings, these will be the labels appearing to the right of the radio buttons.",
  "widgets.radio.RadioButton1.radio_values": "A list of values assigned to each radio button, one will be returned if its button is checked.",
  "widgets.radio.RadioTable": "A div containing a table of radio controls with text. Without a form or submit button, typically included within a form.",
  "widgets.radio.RadioTable.contents": "A list of lists, one for each row containing values, labels and TextBlock or text.",
  "widgets.radio.RadioTable.contents.full": "A list of lists, one for each row containing values, labels and TextBlock or text.\r\nEach inner list has index:\r\n0 : The value of the radio field, returned if the field is checked.\r\n1 : The label text of the field.\r\n2 : A TextBlock reference, this TextBlock is set in the second column of the table. \r\n3 : If non empty text, this is used in the second column rather than a TextBlock.",
  "widgets.radio.RadioTable.error_class": "The CSS class applied to the normally hidden error div.",
  "widgets.radio.RadioTable.even_class": "The CSS class applied to the tr element of even rows, if empty string, then no class will be applied.",
  "widgets.radio.RadioTable.header_class": "The CSS class of the header row, if empty string, then no class will be applied.",
  "widgets.radio.RadioTable.odd_class": "The CSS class applied to the tr element of odd rows, if empty string, then no class will be applied.",
  "widgets.radio.RadioTable.radio_checked": "The value to be initially shown as checked. This field name is used as part of the widgfield returned.",
  "widgets.radio.RadioTable.table_class": "The CSS class of the table element, if empty string, then no class will be applied.",
  "widgets.radio.RadioTable.title1": "The header title string over the first column.",
  "widgets.radio.RadioTable.title2": "The header title string over the second column.",
  "widgets.radio.TwoRadioOptions": "A two option radio control. Without a form or submit button, typically included within a form.",
  "widgets.radio.TwoRadioOptions.div_class1": "The CSS class of the div containing the first radio input field.",
  "widgets.radio.TwoRadioOptions.div_class2": "The CSS class of the div containing the second radio input field.",
  "widgets.radio.TwoRadioOptions.label1": "Label text to appear to the right of the first radio input field.",
  "widgets.radio.TwoRadioOptions.label2": "Label text to appear to the right of the second radio input field.",
  "widgets.radio.TwoRadioOptions.radio_checked": "The value is the radio value to appear checked. The field name will be used in the widgfield submitted.",
  "widgets.radio.TwoRadioOptions.value1": "The value returned if the first radio field is checked.",
  "widgets.radio.TwoRadioOptions.value2": "The value returned if the second radio field is checked.",
  "widgets.radio.module": "Radio buttons.",
  "widgets.show": "If True, the widget is included in the page. If False the widget is removed.",
  "widgets.show.full": "Takes value True or False. If True, the widget is included in the page. If False the widget is removed.  This is not the equivalent of the \"hide\" attribute, as the widget is not present in the html data transmitted, and therefore cannot be displayed via a CSS or javascript command.",
  "widgets.show_error": "Sets the widget default error message.",
  "widgets.svgbasics.Circle": "An SVG Circle.",
  "widgets.svgbasics.Circle.cx": "centre x coordinate, for example 50",
  "widgets.svgbasics.Circle.cy": "centre y coordinate, for example 50",
  "widgets.svgbasics.Circle.fill": "The fill colour.",
  "widgets.svgbasics.Circle.r": "The circle radius, for example 40",
  "widgets.svgbasics.Circle.stroke": "The circle edge colour.",
  "widgets.svgbasics.Circle.stroke_width": "The circle edge width.",
  "widgets.svgbasics.Ellipse": "An SVG Ellipse.",
  "widgets.svgbasics.Ellipse.cx": "centre x coordinate, for example 50",
  "widgets.svgbasics.Ellipse.cy": "centre y coordinate, for example 50",
  "widgets.svgbasics.Ellipse.fill": "The fill colour.",
  "widgets.svgbasics.Ellipse.rx": "The horizontal radius, for example 40",
  "widgets.svgbasics.Ellipse.ry": "The vertical radius, for example 20",
  "widgets.svgbasics.Ellipse.stroke": "The ellipse edge colour.",
  "widgets.svgbasics.Ellipse.stroke_width": "The ellipse edge width.",
  "widgets.svgbasics.Group": "A g tag, used as a container for further svg elements and widgets, with transform attribute JSON settable.",
  "widgets.svgbasics.Group.container0": "Further svg elements and widgets can be contained within the svg tags here.",
  "widgets.svgbasics.Group.transform": "A transform string such as translate and rotate can be set here. Can be set by JSON.",
  "widgets.svgbasics.Line": "An SVG Line.",
  "widgets.svgbasics.Line.stroke": "The line colour.",
  "widgets.svgbasics.Line.stroke_width": "The line width.",
  "widgets.svgbasics.Line.x1": "The line start x coordinate, for example 0",
  "widgets.svgbasics.Line.x2": "The line end x coordinate, for example 100",
  "widgets.svgbasics.Line.y1": "The line start y coordinate, for example 0",
  "widgets.svgbasics.Line.y2": "The line end y coordinate, for example 100",
  "widgets.svgbasics.Path": "An SVG path element.",
  "widgets.svgbasics.Path.d": "The path data string.",
  "widgets.svgbasics.Path.fill": "The fill colour.",
  "widgets.svgbasics.Path.stroke": "The path line colour.",
  "widgets.svgbasics.Path.stroke_width": "The path line width.",
  "widgets.svgbasics.Polygon": "An SVG polygon.",
  "widgets.svgbasics.Polygon.fill": "The fill colour.",
  "widgets.svgbasics.Polygon.points": "A list of two element lists, each inner list being an x,y point.",
  "widgets.svgbasics.Polygon.stroke": "The path line colour.",
  "widgets.svgbasics.Polygon.stroke_width": "The path line width.",
  "widgets.svgbasics.Polyline": "An SVG polyline.",
  "widgets.svgbasics.Polyline.fill": "The fill colour.",
  "widgets.svgbasics.Polyline.points": "A list of two element lists, each inner list being an x,y point.",
  "widgets.svgbasics.Polyline.stroke": "The path line colour.",
  "widgets.svgbasics.Polyline.stroke_width": "The path line width.",
  "widgets.svgbasics.Rect": "An SVG rectangle.",
  "widgets.svgbasics.Rect.fill": "The fill colour.",
  "widgets.svgbasics.Rect.height": "A height value, for example 100",
  "widgets.svgbasics.Rect.rx": "The horizontal corner radius of the rectangle, for example 0",
  "widgets.svgbasics.Rect.ry": "The vertical corner radius of the rectangle, for example 0",
  "widgets.svgbasics.Rect.stroke": "The outline edge colour.",
  "widgets.svgbasics.Rect.stroke_width": "The outline edge width.",
  "widgets.svgbasics.Rect.width": "A width value, for example 100",
  "widgets.svgbasics.Rect.x": "x coords, for example 0",
  "widgets.svgbasics.Rect.y": "y coords, for example 0",
  "widgets.svgbasics.SVGContainer": "An SVG tag, used as a container for further svg elements and widgets, with width and height JSON settable.",
  "widgets.svgbasics.SVGContainer.container0": "Further svg elements and widgets can be contained within the svg tags here.",
  "widgets.svgbasics.SVGContainer.height": "SVG viewport height value, for example 100. Can be set by JSON.",
  "widgets.svgbasics.SVGContainer.preserveAspectRatio": "SVG preserveAspectRatio attribute.",
  "widgets.svgbasics.SVGContainer.viewBox": "SVG viewBox attribute.",
  "widgets.svgbasics.SVGContainer.width": "SVG viewport width value, for example 100. Can be set by JSON.",
  "widgets.svgbasics.SimpleText": "SVG text.",
  "widgets.svgbasics.SimpleText.dx": "x displacement from absolute value, for example 0.",
  "widgets.svgbasics.SimpleText.dy": "y displacement from absolute value, for example 0.",
  "widgets.svgbasics.SimpleText.fill": "The fill colour.",
  "widgets.svgbasics.SimpleText.font_family": "font-family CSS  attribute, such as Arial.",
  "widgets.svgbasics.SimpleText.font_size": "font-size CSS  attribute, such as 20.",
  "widgets.svgbasics.SimpleText.stroke": "The outline edge colour.",
  "widgets.svgbasics.SimpleText.stroke_width": "The outline edge width.",
  "widgets.svgbasics.SimpleText.text": "The text to display.",
  "widgets.svgbasics.SimpleText.x": "x coords, for example 0.",
  "widgets.svgbasics.SimpleText.y": "y coords, for example 0.",
  "widgets.svgbasics.module": "SVG basic tags and shapes.",
  "widgets.svggraphs.Chart1": "A chart filled with a list of values from the right to the left.",
  "widgets.svggraphs.Chart1.font_family": "Font of the text on the chart.",
  "widgets.svggraphs.Chart1.full": "A chart filled with a list of values from the right to the left.\r\n\r\nThe widget should either be set within an SVG page, or if in an HTML template page, then it should be within a set of svg tags, or an SVGContainer widget.\r\n\r\nThe transform attribute can be used to scale, or move the widget, any svg standard documentation will give further information.",
  "widgets.svggraphs.Chart1.minus50legend": "Text legend to display on the -50 line of the chart",
  "widgets.svggraphs.Chart1.plus50legend": "Text legend to display on the +50 line of the chart",
  "widgets.svggraphs.Chart1.stroke": "The stroke of the value polyline, normally a colour such as black.",
  "widgets.svggraphs.Chart1.stroke_width": "An integer of the width of the value polyline, normally 1",
  "widgets.svggraphs.Chart1.transform": "The widget is contained within a g tag, with a transform attribute which can be set here.",
  "widgets.svggraphs.Chart1.values": "A list of up to 50 integers, between +100 and -100, the last in the list are shown on the right of the chart. JSON settable.",
  "widgets.svggraphs.Chart1.zerolegend": "Text legend to display on the centre zero line of the chart",
  "widgets.svggraphs.Graph48Hr": "A 48 hour graph of values against datetime.datetime objects.",
  "widgets.svggraphs.Graph48Hr.axiscol": "stroke value applied to axis text and markings",
  "widgets.svggraphs.Graph48Hr.fill": "fill colour applied within the graph rectangle",
  "widgets.svggraphs.Graph48Hr.fill_opacity": "opacity - between 0 and 1, applied within the graph rectangle",
  "widgets.svggraphs.Graph48Hr.font_family": "Font of the axis text on the graph.",
  "widgets.svggraphs.Graph48Hr.full": "A 48 hour graph of values against datetime.datetime objects.\r\n\r\nThe widget should either be set within an SVG page, or if in an HTML template page, then it should be within a set of svg tags, or an SVGContainer widget.\r\n\r\nThe transform attribute can be used to scale or move the widget, any svg standard documentation will give further information.",
  "widgets.svggraphs.Graph48Hr.maxvalue": "Defines graph y maximum",
  "widgets.svggraphs.Graph48Hr.minvalue": "Defines graph y minimum",
  "widgets.svggraphs.Graph48Hr.plotcol": "stroke value applied to plotted + points",
  "widgets.svggraphs.Graph48Hr.transform": "The widget is contained within a g tag, with a transform attribute which can be set here.",
  "widgets.svggraphs.Graph48Hr.values": "List of two element lists, [[value, datetime], ...]",
  "widgets.svggraphs.module": "A selection of SVG graphs - can display values sent by JSON.",
  "widgets.svgmeters.Arrow1": "An SVG arrow shape, fitting in a 100x100 space, use transform to scale and rotate.",
  "widgets.svgmeters.Arrow1.fill": "The fill colour.",
  "widgets.svgmeters.Arrow1.stroke": "The outline edge colour.",
  "widgets.svgmeters.Arrow1.stroke_width": "The outline edge width.",
  "widgets.svgmeters.Arrow1.transform": "A transform string such as translate and rotate can be set here. Can be set by JSON.",
  "widgets.svgmeters.Arrow2": "A slim SVG arrow shape, fitting in a 50x200 space, use transform to scale and rotate.",
  "widgets.svgmeters.Arrow2.fill": "The fill colour.",
  "widgets.svgmeters.Arrow2.stroke": "The outline edge colour.",
  "widgets.svgmeters.Arrow2.stroke_width": "The outline edge width.",
  "widgets.svgmeters.Arrow2.transform": "A transform string such as translate and rotate can be set here. Can be set by JSON.",
  "widgets.svgmeters.Traditional1": "A curved scale, fitting in a 700x400 space, with arrow indicating the measurement value.",
  "widgets.svgmeters.Traditional1.arrow_stroke": "The outline colour for the arrow.",
  "widgets.svgmeters.Traditional1.font_family": "Font of the text on the scale.",
  "widgets.svgmeters.Traditional1.full": "A curved scale, fitting in a 700x400 space, with arrow indicating the measurement value.\r\n\r\nThe widget should either be set within an SVG page, or if in an HTML template page, then it should be within a set of svg tags, or an SVGContainer widget.\r\n\r\nThe transform attribute can be used to scale, move or rotate the widget, any svg standard documentation will give further information.",
  "widgets.svgmeters.Traditional1.largeintervals": "An incremental value at which large ticks will be placed on the scale, with text value labels.",
  "widgets.svgmeters.Traditional1.maximum": "The maximum value, at the right of the scale.",
  "widgets.svgmeters.Traditional1.measurement": "The actual measurement, the arrow will rotate and point to this value. JSON enabled.",
  "widgets.svgmeters.Traditional1.minimum": "The minimum value, at the left of the scale.",
  "widgets.svgmeters.Traditional1.smallintervals": "An incremental value at which small ticks will be placed on the scale.",
  "widgets.svgmeters.Traditional1.transform": "The widget is contained within a g tag, with a transform attribute which can be set here.",
  "widgets.svgmeters.Vertical1": "A vertical scale, fitting in a 300x700 space, with arrow indicating the measurement value.",
  "widgets.svgmeters.Vertical1.arrow_fill": "The fill colour for the arrow.",
  "widgets.svgmeters.Vertical1.font_family": "Font of the text on the scale.",
  "widgets.svgmeters.Vertical1.full": "A vertical scale, fitting in a 300x700 space, with arrow indicating the measurement value.\r\n\r\nThe widget should either be set within an SVG page, or if in an HTML template page, then it should be within a set of svg tags, or an SVGContainer widget.\r\n\r\nThe transform attribute can be used to scale, or move the widget, any svg standard documentation will give further information.",
  "widgets.svgmeters.Vertical1.largeintervals": "An incremental value at which large ticks will be placed on the scale, with text value labels.",
  "widgets.svgmeters.Vertical1.maximum": "The maximum value, at the top of the scale.",
  "widgets.svgmeters.Vertical1.measurement": "The actual measurement, the arrow will point to this value. JSON enabled.",
  "widgets.svgmeters.Vertical1.minimum": "The minimum value, at the bottom of the scale.",
  "widgets.svgmeters.Vertical1.smallintervals": "An incremental value at which small ticks will be placed on the scale.",
  "widgets.svgmeters.Vertical1.transform": "The widget is contained within a g tag, with a transform attribute which can be set here.",
  "widgets.svgmeters.module": "A selection of SVG meters - can display values sent by JSON.",
  "widgets.tables.ButtonTextBlockTable1": "A form consisting of a two column table of submit buttons and TextBlocks.",
  "widgets.tables.ButtonTextBlockTable1.action": "The target ident or label called when a button is pressed.",
  "widgets.tables.ButtonTextBlockTable1.button_class": "The CSS class applied to the submit buttons.",
  "widgets.tables.ButtonTextBlockTable1.buttons": "A list of lists, an inner list for each row. The field name is the button name, first item of inner lists is the value on the button, which will be returned, second item is the TextBlock reference for the second column.",
  "widgets.tables.ButtonTextBlockTable1.col1_button_title": "The title of the first column, above the buttons.",
  "widgets.tables.ButtonTextBlockTable1.col2_text_title": "The title of the second colum, above the TextBlocks.",
  "widgets.tables.ButtonTextBlockTable1.error_class": "The CSS class of the normally hidden div which is shown when an error is displayed.",
  "widgets.tables.ButtonTextBlockTable1.even_class": "The CSS class of even rows in the table.",
  "widgets.tables.ButtonTextBlockTable1.header_class": "The CSS class of the header row, if empty string, then no class will be applied.",
  "widgets.tables.ButtonTextBlockTable1.hidden_field1": "Hidden data sent with each button press.",
  "widgets.tables.ButtonTextBlockTable1.hidden_field2": "Hidden data sent with each button press.",
  "widgets.tables.ButtonTextBlockTable1.hidden_field3": "Hidden data sent with each button press.",
  "widgets.tables.ButtonTextBlockTable1.hidden_field4": "Hidden data sent with each button press.",
  "widgets.tables.ButtonTextBlockTable1.odd_class": "The CSS class applied to odd rows of the table.",
  "widgets.tables.ButtonTextBlockTable1.table_class": "The CSS class applied to the table element.",
  "widgets.tables.ColorTable1": "A table of coloured text strings.",
  "widgets.tables.ColorTable1.contents": "A list of lists, each inner list is [text, text colour, background color].",
  "widgets.tables.ColorTable1.contents.full": "A list of lists, each inner list is [text, text colour, background color]. These colour strings being CSS colours which will be applied to the cell style. The number of these inner lists define the total number of cells in the table.",
  "widgets.tables.ColorTable1.even_class": "The CSS class applied to even rows.",
  "widgets.tables.ColorTable1.even_class.full": "The CSS class applied to even rows, if empty string, then no class will be applied.",
  "widgets.tables.ColorTable1.header_class": "The CSS class of the header row.",
  "widgets.tables.ColorTable1.header_class.full": "The CSS class of the header row, if empty string, then no class will be applied.",
  "widgets.tables.ColorTable1.odd_class": "The CSS class applied to odd rows",
  "widgets.tables.ColorTable1.odd_class.full": "The CSS class set on odd rows, if empty string, then no class will be applied.",
  "widgets.tables.ColorTable1.titles": "List of text strings used as header titles.",
  "widgets.tables.ColorTable1.titles.full": "List of text strings used as header titles. The length of this list determines the number of columns in the table.",
  "widgets.tables.TextBlockTable2": "A table of two columns: [text strings, TextBlocks].",
  "widgets.tables.TextBlockTable2.contents": "List of two item lists, [['text', 'textblock_ref'], ... ].",
  "widgets.tables.TextBlockTable2.contents.full": "List of two item lists, [['text', 'textblock_ref'], ... ], Being text to place in the first column, and reference of the TextBlock to place in the second column. The number of inner lists being the number of rows in the table.",
  "widgets.tables.TextBlockTable2.even_class": "CSS class of even rows.",
  "widgets.tables.TextBlockTable2.even_class.full": "CSS class of even rows, if empty string, then no class will be applied.",
  "widgets.tables.TextBlockTable2.header_class": "CSS class of the header row.",
  "widgets.tables.TextBlockTable2.header_class.full": "CSS class of the header row, if empty string, then no class will be applied.",
  "widgets.tables.TextBlockTable2.odd_class": "CSS class of odd rows.",
  "widgets.tables.TextBlockTable2.odd_class.full": "CSS class of odd rows, if empty string, then no class will be applied.",
  "widgets.tables.TextBlockTable2.title1": "The header title over the first text column.",
  "widgets.tables.TextBlockTable2.title1.full": "The header title over the first text column.",
  "widgets.tables.TextBlockTable2.title2": "The header title over the second text column.",
  "widgets.tables.TextBlockTable2.title2.full": "The header title over the second text column.",
  "widgets.tables.ThreeColTable1": "A table of three text columns, JSON settable.",
  "widgets.tables.ThreeColTable1.col1": "A list of text strings to place in the first column.",
  "widgets.tables.ThreeColTable1.col1.full": "A list of text strings to place in the first column.",
  "widgets.tables.ThreeColTable1.col2": "A list of text strings to place in the second column.",
  "widgets.tables.ThreeColTable1.col2.full": "A list of text strings to place in the second column.",
  "widgets.tables.ThreeColTable1.col3": "A list of text strings to place in the third column.",
  "widgets.tables.ThreeColTable1.col3.full": "A list of text strings to place in the third column.",
  "widgets.tables.ThreeColTable1.even_class": "CSS class of even rows.",
  "widgets.tables.ThreeColTable1.even_class.full": "CSS class of even rows, if empty string, then no class will be applied.",
  "widgets.tables.ThreeColTable1.header_class": "CSS class of the header row.",
  "widgets.tables.ThreeColTable1.header_class.full": "CSS class of the header row, if empty string, then no class will be applied.",
  "widgets.tables.ThreeColTable1.odd_class": "CSS class of odd rows.",
  "widgets.tables.ThreeColTable1.odd_class.full": "CSS class of odd rows, if empty string, then no class will be applied.",
  "widgets.tables.ThreeColTable1.title1": "The header title over the first text column.",
  "widgets.tables.ThreeColTable1.title1.full": "The header title over the first text column.",
  "widgets.tables.ThreeColTable1.title2": "The header title over the second text column.",
  "widgets.tables.ThreeColTable1.title2.full": "The header title over the second text column.",
  "widgets.tables.ThreeColTable1.title3": "The header title over the third text column.",
  "widgets.tables.ThreeColTable1.title3.full": "The header title over the third text column.",
  "widgets.tables.TwoColTable1": "A table of two text columns, JSON settable.",
  "widgets.tables.TwoColTable1.col1": "A list of text strings to place in the first column.",
  "widgets.tables.TwoColTable1.col1.full": "A list of text strings to place in the first column.",
  "widgets.tables.TwoColTable1.col2": "A list of text strings to place in the second column.",
  "widgets.tables.TwoColTable1.col2.full": "A list of text strings to place in the second column.",
  "widgets.tables.TwoColTable1.even_class": "CSS class of even rows.",
  "widgets.tables.TwoColTable1.even_class.full": "CSS class of even rows, if empty string, then no class will be applied.",
  "widgets.tables.TwoColTable1.header_class": "CSS class of the header row.",
  "widgets.tables.TwoColTable1.header_class.full": "CSS class of the header row, if empty string, then no class will be applied.",
  "widgets.tables.TwoColTable1.odd_class": "CSS class of odd rows.",
  "widgets.tables.TwoColTable1.odd_class.full": "CSS class of odd rows, if empty string, then no class will be applied.",
  "widgets.tables.TwoColTable1.title1": "The header title over the first text column.",
  "widgets.tables.TwoColTable1.title1.full": "The header title over the first text column.",
  "widgets.tables.TwoColTable1.title2": "The header title over the second text column.",
  "widgets.tables.TwoColTable1.title2.full": "The header title over the second text column.",
  "widgets.tables.module": "Text tables.",
  "widgets.textarea.SubmitTextArea": "Defines a form containing a div with a text area input field.",
  "widgets.textarea.SubmitTextArea.action": "The target ident or label of the form.",
  "widgets.textarea.SubmitTextArea.button_class": "CSS class set on the submit button.",
  "widgets.textarea.SubmitTextArea.button_text": "The text on the submit button.",
  "widgets.textarea.SubmitTextArea.cols": "The number of columns of the text area.",
  "widgets.textarea.SubmitTextArea.error_class": "The CSS class of the normally hidden error div, displayed when an error is shown.",
  "widgets.textarea.SubmitTextArea.hidden_field1": "A hidden data field submitted with the form.",
  "widgets.textarea.SubmitTextArea.hidden_field2": "A hidden data field submitted with the form.",
  "widgets.textarea.SubmitTextArea.hidden_field3": "A hidden data field submitted with the form.",
  "widgets.textarea.SubmitTextArea.hidden_field4": "A hidden data field submitted with the form.",
  "widgets.textarea.SubmitTextArea.input_text": "The default text in the text input field, field name used in the submitted widgfield.",
  "widgets.textarea.SubmitTextArea.inputdiv_class": "The CSS class applied to the div which contains the input text area and button.",
  "widgets.textarea.SubmitTextArea.rows": "The number of rows of the text area.",
  "widgets.textarea.SubmitTextArea.textarea_class": "The CSS class to apply to the textarea.",
  "widgets.textarea.SubmitTextArea.textarea_style": "The CSS style to apply to the text area.",
  "widgets.textarea.TextArea1": "Defines an input field only, no form, label or submit button.",
  "widgets.textarea.TextArea1.cols": "The number of columns of the text area.",
  "widgets.textarea.TextArea1.input_text": "The default text in the text input field, field name used in the submitted widgfield.",
  "widgets.textarea.TextArea1.rows": "The number of rows of the text area.",
  "widgets.textarea.TextArea2": "A div containing a hidden error paragraph with a textarea input field (no form or submit button). A label to the left of the textarea can have a class and text set.",
  "widgets.textarea.TextArea2.cols": "The number of columns of the text area.",
  "widgets.textarea.TextArea2.error_class": "The CSS class of the normally hidden error div.",
  "widgets.textarea.TextArea2.input_text": "The default text in the text input field, field name used in the submitted widgfield.",
  "widgets.textarea.TextArea2.label": "The text appearing in a label tag to the left of the input field.",
  "widgets.textarea.TextArea2.label_class": "The CSS class of the label to the left of the input field.",
  "widgets.textarea.TextArea2.redstar": "If True a red asterisk is shown by the side of the input field.",
  "widgets.textarea.TextArea2.rows": "The number of rows of the text area.",
  "widgets.textarea.TextArea2.textarea_class": "The CSS class applied to the textarea.",
  "widgets.textarea.TextArea2.textarea_style": "The CSS style applied to the textarea.",
  "widgets.textarea.module": "Widgets containing a textarea to insert into a form.",
  "widgets.upload.SubmitUploadFile1": "Defines a form with a file input field.",
  "widgets.upload.SubmitUploadFile1.action": "The target ident or label to send the file to. The name of this field is used as widgfield fieldname",
  "widgets.upload.SubmitUploadFile1.error_class": "The CSS class of the normally hidden error div.",
  "widgets.upload.SubmitUploadFile1.filebutton_class": "The CSS class of the file browse button.",
  "widgets.upload.SubmitUploadFile1.filebutton_label": "The text displayed to the left of the file browse button.",
  "widgets.upload.SubmitUploadFile1.filebuttonlabel_class": "The CSS class of the label to the left of the file browse button.",
  "widgets.upload.SubmitUploadFile1.fileinputdiv_class": "The CSS class of the div which contains the label and file browse button.",
  "widgets.upload.SubmitUploadFile1.hidden_field1": "A hidden field value, submitted with the form, leave blank if unused.",
  "widgets.upload.SubmitUploadFile1.hidden_field2": "A hidden field value, submitted with the form, leave blank if unused.",
  "widgets.upload.SubmitUploadFile1.hidden_field3": "A hidden field value, submitted with the form, leave blank if unused.",
  "widgets.upload.SubmitUploadFile1.hidden_field4": "A hidden field value, submitted with the form, leave blank if unused.",
  "widgets.upload.SubmitUploadFile1.hide": "If True, the widget is hidden, can be set/unset by JSON.",
  "widgets.upload.SubmitUploadFile1.required": "Set True to put the 'required' attribute into the input field.",
  "widgets.upload.SubmitUploadFile1.submitbutton_class": "The CSS class of the submit button.",
  "widgets.upload.SubmitUploadFile1.submitbutton_label": "The text displayed to the left of the submit button.",
  "widgets.upload.SubmitUploadFile1.submitbutton_text": "The text on the submit button.",
  "widgets.upload.SubmitUploadFile1.submitbuttonlabel_class": "The CSS class of the label to the left of the submit button.",
  "widgets.upload.SubmitUploadFile1.submitinputdiv_class": "The CSS class of the div which contains the submit label and button.",
  "widgets.upload.UploadFile1": "A file input field, without form or submit button.",
  "widgets.upload.UploadFile1.error_class": "CSS class of the normally hidden error div.",
  "widgets.upload.UploadFile1.filebutton_class": "The CSS class of the file browse button.",
  "widgets.upload.UploadFile1.inputdiv_class": "The CSS class of the div containing the label and file browse button.",
  "widgets.upload.UploadFile1.inputname": "The field name is used as the field of the submitted widgfield. The value is currently unused and should be left blank.",
  "widgets.upload.UploadFile1.label": "The text displayed to the left of the file browse button.",
  "widgets.upload.UploadFile1.label_class": "The CSS class of the label to the left of the file browse button.",
  "widgets.upload.module": "Widgets containing an upload input button to insert into a form.",
  "widgets.widget_class": "The class attribute set in the widget.",
  "widgets.widget_class.full": "The class attribute (if any) set in the widget first tag. This allows the look of the widget to be defined via CSS. If the value is left empty then no class attribute is used.",
  "widgets.widget_style": "If given, sets the 'style' attribute of the widget."
}